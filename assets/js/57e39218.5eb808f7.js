"use strict";(self.webpackChunkmy_docs=self.webpackChunkmy_docs||[]).push([[3402],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>x});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),s=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},m=function(e){var t=s(e.components);return a.createElement(c.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,c=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),p=s(n),d=r,x=p["".concat(c,".").concat(d)]||p[d]||u[d]||l;return n?a.createElement(x,i(i({ref:t},m),{},{components:n})):a.createElement(x,i({ref:t},m))}));function x(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=d;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o[p]="string"==typeof e?e:r,i[1]=o;for(var s=2;s<l;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8460:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>l,metadata:()=>o,toc:()=>s});var a=n(7462),r=(n(7294),n(3905));const l={},i=void 0,o={unversionedId:"TFM/projectTool/GccRiscV",id:"TFM/projectTool/GccRiscV",title:"GccRiscV",description:"RISCV GCC Installation",source:"@site/docs/TFM/projectTool/GccRiscV.md",sourceDirName:"TFM/projectTool",slug:"/TFM/projectTool/GccRiscV",permalink:"/fpga_mafia_wiki/docs/TFM/projectTool/GccRiscV",draft:!1,editUrl:"https://github.com/FPGA-MAFIA/fpga_mafia_wiki/tree/main/docs/TFM/projectTool/GccRiscV.md",tags:[],version:"current",frontMatter:{},sidebar:"TFM",previous:{title:"gcc_intro",permalink:"/fpga_mafia_wiki/docs/TFM/projectTool/gcc_intro"},next:{title:"linker",permalink:"/fpga_mafia_wiki/docs/TFM/projectTool/linker"}},c={},s=[{value:"RISCV GCC Installation",id:"riscv-gcc-installation",level:3},{value:"Gitbash shell - adding to PATH and test installation:",id:"gitbash-shell---adding-to-path-and-test-installation",level:3},{value:"Example of RISCV GCC usage",id:"example-of-riscv-gcc-usage",level:3},{value:"example of linker script",id:"example-of-linker-script",level:3},{value:"example of crt0.s",id:"example-of-crt0s",level:3},{value:"Compile -&gt; Link -&gt; assembler -&gt; machine code:",id:"compile---link---assembler---machine-code",level:2}],m={toc:s},p="wrapper";function u(e){let{components:t,...n}=e;return(0,r.kt)(p,(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h3",{id:"riscv-gcc-installation"},"RISCV GCC Installation"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/xpack-dev-tools/riscv-none-embed-gcc-xpack/releases/tag/v10.2.0-1.2/"},"https://github.com/xpack-dev-tools/riscv-none-embed-gcc-xpack/releases/tag/v10.2.0-1.2/"),' -> File name: "xpack-riscv-none-embed-gcc-10.2.0-1.2-win32-x64.zip"). If newer versions are available, you can also download them and then extract into the correct location as shown in the next section.')),(0,r.kt)("p",null,"You can unzip the file into any library, but we suggest unzipping it to this specific Windows path.",(0,r.kt)("br",{parentName:"p"}),"\n",(0,r.kt)("inlineCode",{parentName:"p"},"C:\\Users\\your-user-name\\AppData\\Roaming\\xPacks\\xpack-riscv-none-embed-gcc")),(0,r.kt)("h3",{id:"gitbash-shell---adding-to-path-and-test-installation"},"Gitbash shell - adding to PATH and test installation:"),(0,r.kt)("p",null,"Add to the ~/.bashrc the PATH of the gcc compiler\nExample:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"export PATH=$PATH:/c/Users/your-user-name/AppData/Roaming/xPacks/xpack-riscv-none-embed-gcc/bin\n")),(0,r.kt)("p",null,"Make sure that the PATH is correct."),(0,r.kt)("p",null,'To confirm the successful installation, please enter the following command: "riscv-none-embed-gcc --version". If you receive the version information, everything is set up correctly. If not, please revisit the previous steps carefully or ',(0,r.kt)("a",{parentName:"p",href:"/fpga_mafia_wiki/docs/contact_us/contact"},"Contact Us")," "),(0,r.kt)("h3",{id:"example-of-riscv-gcc-usage"},"Example of RISCV GCC usage"),(0,r.kt)("p",null,"Like we mentioned earlier, GCC typically makes a *.elf file. But in our situation, it's also crucial for us to create a special SystemVerilog file. This file will have the memory contents representing our C program and will go into the instruction memory of the CPU we're building."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Now we will create folder and *.c file")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"cd ~                # your home directory\nmkdir gcc_test      # make gcc_test folder\ncd gcc_test         # enter that folder\ntouch example.c     # create *.c file\ncode example.c      # open that file in vs code\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Write a basic program, for example:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"// example.c\nint main(){\n    int x = 1;\n    int y = 2;\n    int c = x + y;\n\n    return 0;\n}\n")),(0,r.kt)("p",null,"-Type the following cmd to create assembly file example.s"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},'Type the following command to create an assembly file "example.s" from "example.c"')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"riscv-none-embed-gcc.exe -S -ffreestanding -march=rv32i example.c -o example.s\n")),(0,r.kt)("h3",{id:"example-of-linker-script"},"example of linker script"),(0,r.kt)("p",null,"In general terms, the linker's role encompasses defining memory sections, such as the locations of instructions, data, the stack, heap, and more. For example, in our linker the instruction memory starts at 0x00000000 and its length is: 0x4000, and data memory starts exactly after it.",(0,r.kt)("br",{parentName:"p"}),"\n","For more information ",(0,r.kt)("a",{parentName:"p",href:"https://sourceware.org/binutils/docs/ld/Simple-Example.html"},"click here")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Create basic_linker.ld file in vscode (stay at the same directory)")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    MEMORY {  \n        i_mem          : ORIGIN = 0x00000000 , LENGTH = 0x4000  \n        global_data    : ORIGIN = 0x00004000 , LENGTH = 0x4000  \n    }  \n    SECTIONS {  \n        .text : {  \n        . = ALIGN(4);  \n        *(.start);  \n        *(.text);  \n        . = ORIGIN(i_mem) + LENGTH(i_mem) - 1;  \n        BYTE(0);  \n    }  > i_mem  \n        .data : {  \n        . = ALIGN(4);  \n        *(.rodata);  \n        *(.sdata);  \n        *(.sbss);  \n        } > global_data  \n        .bss : {} > global_data  \n    }  \n")),(0,r.kt)("h3",{id:"example-of-crt0s"},"example of crt0.s"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Create crt0.s file in vscode (stay at the same directory) ")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"_start:\n  .global _start\n  .org 0x00\n  nop                       \n  nop                       \n  nop                       \n  nop                       \n  nop                       \nreset_handler:\n  mv  x1, x0\n  mv  x2, x1\n  mv  x3, x1\n  mv  x4, x1\n  mv  x5, x1\n  mv  x6, x1\n  mv  x7, x1\n  mv  x8, x1\n  mv  x9, x1\n  mv x10, x1\n  mv x11, x1\n  mv x12, x1\n  mv x13, x1\n  mv x14, x1\n  mv x15, x1\n  mv x16, x1\n  mv x17, x1\n  mv x18, x1\n  mv x19, x1\n  mv x20, x1\n  mv x21, x1\n  mv x22, x1\n  mv x23, x1\n  mv x24, x1\n  mv x25, x1\n  mv x26, x1\n  mv x27, x1\n  mv x28, x1\n  mv x29, x1\n  mv x30, x1\n  mv x31, x1\n  /* stack initialization */\n  li   x2, 0x8000\n  jal x1, main  //jump to main\n  ebreak        //end\n  .section .text\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"notice ",(0,r.kt)("inlineCode",{parentName:"li"},"li   x2, 0x8000")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"jal x1, main  //jump to main")," and try to understand where 0x8000 came from")),(0,r.kt)("p",null,"Now, we have everything required to start working on our goals, which is to create both the *.elf file and the memory initialization file."),(0,r.kt)("h2",{id:"compile---link---assembler---machine-code"},"Compile -> Link -> assembler -> machine code:"),(0,r.kt)("p",null," Run the following commands:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Create an *.elf file")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"riscv-none-embed-gcc.exe -O3 -march=rv32i -T basic_linker.ld -nostartfiles -D__riscv__ -Wl,-Map=alive.map crt0.S example.s -o example_rv32i.elf\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},'Create "visible" *.elf file\nIn order to view example_rv32i.elf file we do the following command. ')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"riscv-none-embed-objdump.exe -gd example_rv32i.elf > example_rv32i_elf.txt\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Generate the content for a SystemVerilog instruction memory.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"riscv-none-embed-objcopy.exe --srec-len 1 --output-target=verilog example_rv32i.elf inst_mem.sv\n")),(0,r.kt)("p",null,"make sure you have created the files:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"crt0.S  "),(0,r.kt)("li",{parentName:"ul"},"basic_linker.ld  "),(0,r.kt)("li",{parentName:"ul"},"example.s  "),(0,r.kt)("li",{parentName:"ul"},"example_rv32i.elf  "),(0,r.kt)("li",{parentName:"ul"},"example_rv32i_elf.txt  "),(0,r.kt)("li",{parentName:"ul"},"inst_mem.sv ")),(0,r.kt)("p",null,"If you can that far and everything is functioning smoothly, you've done an excellent job. \ud83d\udc4d"))}u.isMDXComponent=!0}}]);