"use strict";(self.webpackChunkmy_docs=self.webpackChunkmy_docs||[]).push([[6747],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>m});var r=a(7294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function n(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?n(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):n(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,r,i=function(e,t){if(null==e)return{};var a,r,i={},n=Object.keys(e);for(r=0;r<n.length;r++)a=n[r],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(r=0;r<n.length;r++)a=n[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var c=r.createContext({}),s=function(e){var t=r.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},p=function(e){var t=s(e.components);return r.createElement(c.Provider,{value:t},e.children)},u="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var a=e.components,i=e.mdxType,n=e.originalType,c=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=s(a),d=i,m=u["".concat(c,".").concat(d)]||u[d]||h[d]||n;return a?r.createElement(m,l(l({ref:t},p),{},{components:a})):r.createElement(m,l({ref:t},p))}));function m(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var n=a.length,l=new Array(n);l[0]=d;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o[u]="string"==typeof e?e:i,l[1]=o;for(var s=2;s<n;s++)l[s]=a[s];return r.createElement.apply(null,l)}return r.createElement.apply(null,a)}d.displayName="MDXCreateElement"},7167:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>n,metadata:()=>o,toc:()=>s});var r=a(7462),i=(a(7294),a(3905));const n={},l="High Level Block Description",o={unversionedId:"cache/High_level_block_description",id:"cache/High_level_block_description",title:"High Level Block Description",description:"Transaction Queue (TQ)",source:"@site/docs/cache/High_level_block_description.md",sourceDirName:"cache",slug:"/cache/High_level_block_description",permalink:"/fpga_mafia_wiki/docs/cache/High_level_block_description",draft:!1,editUrl:"https://github.com/FPGA-MAFIA/fpga_mafia_wiki/tree/main/docs/cache/High_level_block_description.md",tags:[],version:"current",frontMatter:{}},c={},s=[{value:"Transaction Queue (TQ)",id:"transaction-queue-tq",level:2},{value:"Pipe",id:"pipe",level:2},{value:"Tag Array",id:"tag-array",level:2},{value:"Data Cache Array",id:"data-cache-array",level:2}],p={toc:s},u="wrapper";function h(e){let{components:t,...a}=e;return(0,i.kt)(u,(0,r.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"high-level-block-description"},"High Level Block Description"),(0,i.kt)("h2",{id:"transaction-queue-tq"},"Transaction Queue (TQ)"),(0,i.kt)("p",null,"The transaction Queue has <NUM","_","TQ","_","ENTRY> entries.\nEach entry has Buffer & FSM (Finite State Machine).\nBuffer - Holds the Data, Address, req","_","id of each request.\nFSM \t- will manage the requests life cycle.\nCommon Finite State Machine Flow:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Write Hit:"),"          S","_","IDLE -> S","_","LU","_","CORE->S","_"," IDLE"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Write Miss:"),"       S","_","IDLE -> S","_","LU","_","CORE->S","_","MB","_","WAIT","_","FILL -> S","_","MB","_","FILL","_","READY -> S","_"," IDLE"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Read Hit:**"),"    \t      S","_","IDLE -> S","_","LU","_","CORE->S","_"," IDLE"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Read Miss:")," \t       S","_","IDLE -> S","_","LU","_","CORE->S","_","MB","_","WAIT","_","FILL -> S","_","MB","_","FILL","_","READY -> S","_"," IDLE")),(0,i.kt)("h2",{id:"pipe"},"Pipe"),(0,i.kt)("p",null,"The \u201cPipe\u201d is a 3-stage pipeline that manages the tag array lookup (LU) & Cache access."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Stage 1: Tag Array Look up (Read)"),(0,i.kt)("li",{parentName:"ul"},"Stage 2: Tag Compare, Tag-Array Update, Cache Read"),(0,i.kt)("li",{parentName:"ul"},"Stage 3: Cache Write, FM Write Back ",(0,i.kt)("a",{parentName:"li",href:"#_evicting_cache-line"},"(Dirty evict)")," & FM Read - Fill ",(0,i.kt)("a",{parentName:"li",href:"#_core_read_miss."},"(Cache miss)"),", LU results to TQ.")),(0,i.kt)("h2",{id:"tag-array"},"Tag Array"),(0,i.kt)("p",null,"The Tag Array is a memory structure that holds the Tags & Indication \u2013 Valid, Modified, MRU, Fill.\nThe \u201cSet\u201d (Index) is the Tag Array read pointer.\nA Lookup will return the entire \u201cSet\u201d.\nEach \u201cset\u201d is 4-ways, meaning each Lookup will compare 4 TAG & their Indications with the Tag we are looking up.\nThe Tag Indication will update according to the Lookup request."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"MRU \u2013 A tag hit will update the Way MRU indication.\n",(0,i.kt)("inlineCode",{parentName:"li"}," "),"Micro architecture decision for the exact MRU arbitration scheme."),(0,i.kt)("li",{parentName:"ul"},"Modified \u2013 A Write request will update the Modified indication"),(0,i.kt)("li",{parentName:"ul"},"Fill \u2013 A Read miss will set the \u201cFill\u201d Indication. A Fill Hit with LU","_","FILL opcode will reset the \u201cFill\u201d Indication.")),(0,i.kt)("h2",{id:"data-cache-array"},"Data Cache Array"),(0,i.kt)("p",null,"The Data Cache is a memory structure that holds the Cache-Line (CL) Data.\nEach access reads a \u201csingle\u201d CL - Meaning reading a single \u201cway\u201d.\nThe exact location in the Cache is determined by the \u2018Way hit\u2019 in the Tag Array Lookup.\nData Array pointer = {Set","[7:0]",",Way","[1:0]","}"))}h.isMDXComponent=!0}}]);