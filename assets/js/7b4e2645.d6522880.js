"use strict";(self.webpackChunkmy_docs=self.webpackChunkmy_docs||[]).push([[8159],{3905:(e,t,r)=>{r.d(t,{Zo:()=>m,kt:()=>p});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),s=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},m=function(e){var t=s(e.components);return n.createElement(l.Provider,{value:t},e.children)},h="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,m=c(e,["components","mdxType","originalType","parentName"]),h=s(r),d=a,p=h["".concat(l,".").concat(d)]||h[d]||f[d]||o;return r?n.createElement(p,i(i({ref:t},m),{},{components:r})):n.createElement(p,i({ref:t},m))}));function p(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=d;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c[h]="string"==typeof e?e:a,i[1]=c;for(var s=2;s<o;s++)i[s]=r[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},4433:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>f,frontMatter:()=>o,metadata:()=>c,toc:()=>s});var n=r(7462),a=(r(7294),r(3905));const o={},i="cache reference model",c={unversionedId:"cache/Verif/refModel",id:"cache/Verif/refModel",title:"cache reference model",description:"table of contents",source:"@site/docs/cache/Verif/refModel.md",sourceDirName:"cache/Verif",slug:"/cache/Verif/refModel",permalink:"/fpga_mafia_wiki/docs/cache/Verif/refModel",draft:!1,editUrl:"https://github.com/FPGA-MAFIA/fpga_mafia_wiki/tree/main/docs/cache/Verif/refModel.md",tags:[],version:"current",frontMatter:{},sidebar:"Cache",previous:{title:"Verification Intro",permalink:"/fpga_mafia_wiki/docs/cache/Verif/verif_intro"},next:{title:"trackers",permalink:"/fpga_mafia_wiki/docs/cache/Verif/trackers"}},l={},s=[{value:"table of contents",id:"table-of-contents",level:2},{value:"What is a reference model?",id:"what-is-a-reference-model",level:2},{value:"Using a &quot;memory&quot; reference model instead of a &quot;cache&quot; reference model",id:"using-a-memory-reference-model-instead-of-a-cache-reference-model",level:2},{value:"Reference model implementation in systemverilog",id:"reference-model-implementation-in-systemverilog",level:2},{value:"the DUT + the FM systemverilog",id:"the-dut--the-fm-systemverilog",level:2}],m={toc:s},h="wrapper";function f(e){let{components:t,...r}=e;return(0,a.kt)(h,(0,n.Z)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"cache-reference-model"},"cache reference model"),(0,a.kt)("h2",{id:"table-of-contents"},"table of contents"),(0,a.kt)("h2",{id:"what-is-a-reference-model"},"What is a reference model?"),(0,a.kt)("p",null,"To verify the Cache DUT, we need a reference model.",(0,a.kt)("br",{parentName:"p"}),"\n","The reference model is a behavioral model of the Cache DUT.",(0,a.kt)("br",{parentName:"p"}),"\n","It is used to generate the expected results of the DUT.  "),(0,a.kt)("p",null,"The reference model is written in a simple as possible systemverilog memory that simple supports read and write operations."),(0,a.kt)("p",null,'The DUT and the reference model are connected to the same stimuli generator with the input "core2cache_req".'),(0,a.kt)("p",null,"both the DUT and the reference model should respond to the same stimuli with the same output.\nusing a python Post-process script, we can compare the DUT and the reference model outputs and check if they are the same."),(0,a.kt)("h2",{id:"using-a-memory-reference-model-instead-of-a-cache-reference-model"},'Using a "memory" reference model instead of a "cache" reference model'),(0,a.kt)("p",null,"instead of creating a cache specific reference model, we can use a simple memory reference model.\nThis is done to simplify the reference model and make it easier to debug."),(0,a.kt)("p",null,"The DUT itself is a cache, which is only the first layer of the memory hierarchy.\nTo be able to create a cache reference model is a very complicated task so we can use a simple memory reference model instead."),(0,a.kt)("p",null,"see the following diagram:\n//TODO insert diagram\n//\n//\n//\n//"),(0,a.kt)("p",null,'As you can see, the reference model is a simple memory that supports read and write operations in a "word" granularity (32 bit).'),(0,a.kt)("p",null,'While the DUT is a cache which is the first layer of the memory space.\nThe full memory space is the FM (Far Memory) which in our Test-Bench is a simple memory that supports read and write operations in a CL (Cache Line) granularity.\nby adding the Cache DUT, we are adding a layer of memory that communicates with the read/write requests from TB (Test-Bench) in a "word" granularity and communicates with the FM in a CL granularity.'),(0,a.kt)("p",null,"This way, by comparing the DUT and the reference model outputs (read responses), we are actually only checking the memory coherence of the DUT - making sure that every read response is the same as the last write to the same address - regardless of the cache performance or features."),(0,a.kt)("p",null,"This approach simplifies the reference model and makes it easier to design and debug.\nPlease note: the FM is not part of the DUT, it is only part of the TB - but is also being verified by the reference model."),(0,a.kt)("h2",{id:"reference-model-implementation-in-systemverilog"},"Reference model implementation in systemverilog"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-systemverilog"},"// insert the reference model code here\n\n")),(0,a.kt)("h2",{id:"the-dut--the-fm-systemverilog"},"the DUT + the FM systemverilog"),(0,a.kt)("p",null,"As mentioned before, the DUT is a cache which is the first layer of the memory space.\nBut we are not testing the DUT alone, we are testing the DUT + the FM to simply the reference model and coherence verification."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-systemverilog"},"// insert the DUT + FM code here\n\n")))}f.isMDXComponent=!0}}]);