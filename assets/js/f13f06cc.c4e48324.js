"use strict";(self.webpackChunkmy_docs=self.webpackChunkmy_docs||[]).push([[1993],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>d});var n=r(7294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var l=n.createContext({}),s=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},u=function(e){var t=s(e.components);return n.createElement(l.Provider,{value:t},e.children)},f="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),f=s(r),m=i,d=f["".concat(l,".").concat(m)]||f[m]||p[m]||a;return r?n.createElement(d,o(o({ref:t},u),{},{components:r})):n.createElement(d,o({ref:t},u))}));function d(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=r.length,o=new Array(a);o[0]=m;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c[f]="string"==typeof e?e:i,o[1]=c;for(var s=2;s<a;s++)o[s]=r[s];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},6097:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>c,toc:()=>s});var n=r(7462),i=(r(7294),r(3905));const a={},o="Verification",c={unversionedId:"cache/Verification",id:"cache/Verification",title:"Verification",description:"In this section we will write a list of scenarios and points we want to cover",source:"@site/docs/cache/Verification.md",sourceDirName:"cache",slug:"/cache/Verification",permalink:"/fpga_mafia_wiki/docs/cache/Verification",draft:!1,editUrl:"https://github.com/FPGA-MAFIA/fpga_mafia_wiki/tree/main/docs/cache/Verification.md",tags:[],version:"current",frontMatter:{}},l={},s=[],u={toc:s},f="wrapper";function p(e){let{components:t,...r}=e;return(0,i.kt)(f,(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"verification"},"Verification"),(0,i.kt)("p",null,"In this section we will write a list of scenarios and points we want to cover"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Rd after Rd to same cache-line: the first read request should miss but the second one should hit."),(0,i.kt)("li",{parentName:"ul"},"Read after Write to same CL: expecting same behavior as above."),(0,i.kt)("li",{parentName:"ul"},"Multiple writes then multiple reads, all to same CL: we are expecting a miss for the first write request which will send a fill, for the others they can miss but should not send a new fill request, all the read requests should hit."),(0,i.kt)("li",{parentName:"ul"},"Write b2b to the same CL: we expect miss for the two write request but a fill only for the first one. Read requests after a small delay to check the write data is read.")))}p.isMDXComponent=!0}}]);