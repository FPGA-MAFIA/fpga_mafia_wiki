"use strict";(self.webpackChunkmy_docs=self.webpackChunkmy_docs||[]).push([[53],{1109:e=>{e.exports=JSON.parse('{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"TFM":[{"type":"link","label":"Welcome","href":"/fpga_mafia_wiki/docs/TFM/welcome","docId":"TFM/welcome"},{"type":"category","label":"IDE - Integrated Development Environment","items":[{"type":"link","label":"vs_code","href":"/fpga_mafia_wiki/docs/TFM/projectTool/vs_code","docId":"TFM/projectTool/vs_code"},{"type":"link","label":"GitBash","href":"/fpga_mafia_wiki/docs/TFM/projectTool/GitBash","docId":"TFM/projectTool/GitBash"},{"type":"link","label":"bashrc","href":"/fpga_mafia_wiki/docs/TFM/projectTool/bashrc","docId":"TFM/projectTool/bashrc"},{"type":"link","label":"extensions","href":"/fpga_mafia_wiki/docs/TFM/projectTool/extensions","docId":"TFM/projectTool/extensions"},{"type":"link","label":"python","href":"/fpga_mafia_wiki/docs/TFM/projectTool/python","docId":"TFM/projectTool/python"},{"type":"link","label":"markdown","href":"/fpga_mafia_wiki/docs/TFM/projectTool/markdown","docId":"TFM/projectTool/markdown"},{"type":"link","label":"Docusaurus","href":"/fpga_mafia_wiki/docs/TFM/projectTool/docusaurus","docId":"TFM/projectTool/docusaurus"}],"collapsed":true,"collapsible":true,"href":"/fpga_mafia_wiki/docs/TFM/projectTool/IDE"},{"type":"category","label":"modelsim","items":[{"type":"link","label":"hw_compile","href":"/fpga_mafia_wiki/docs/TFM/projectTool/hw_compile","docId":"TFM/projectTool/hw_compile"},{"type":"link","label":"hw_elab","href":"/fpga_mafia_wiki/docs/TFM/projectTool/hw_elab","docId":"TFM/projectTool/hw_elab"},{"type":"link","label":"hw_sim","href":"/fpga_mafia_wiki/docs/TFM/projectTool/hw_sim","docId":"TFM/projectTool/hw_sim"},{"type":"link","label":"hw_gui_debug","href":"/fpga_mafia_wiki/docs/TFM/projectTool/hw_gui_debug","docId":"TFM/projectTool/hw_gui_debug"},{"type":"link","label":"modelsim_examples","href":"/fpga_mafia_wiki/docs/TFM/projectTool/modelsim_examples","docId":"TFM/projectTool/modelsim_examples"}],"collapsed":true,"collapsible":true,"href":"/fpga_mafia_wiki/docs/TFM/projectTool/modelsim_intro"},{"type":"category","label":"Quartus & FPGA","items":[{"type":"link","label":"basic_example","href":"/fpga_mafia_wiki/docs/TFM/projectTool/basic_example","docId":"TFM/projectTool/basic_example"},{"type":"link","label":"mod3_cnt","href":"/fpga_mafia_wiki/docs/TFM/projectTool/mod3_cnt","docId":"TFM/projectTool/mod3_cnt"},{"type":"link","label":"de10_lite","href":"/fpga_mafia_wiki/docs/TFM/projectTool/de10_lite","docId":"TFM/projectTool/de10_lite"},{"type":"link","label":"quartus_gui","href":"/fpga_mafia_wiki/docs/TFM/projectTool/quartus_gui","docId":"TFM/projectTool/quartus_gui"}],"collapsed":true,"collapsible":true,"href":"/fpga_mafia_wiki/docs/TFM/projectTool/quartus_intro"},{"type":"category","label":"GCC - RISCV","items":[{"type":"link","label":"GccRiscV","href":"/fpga_mafia_wiki/docs/TFM/projectTool/GccRiscV","docId":"TFM/projectTool/GccRiscV"},{"type":"link","label":"linker","href":"/fpga_mafia_wiki/docs/TFM/projectTool/linker","docId":"TFM/projectTool/linker"},{"type":"link","label":"crt0","href":"/fpga_mafia_wiki/docs/TFM/projectTool/crt0","docId":"TFM/projectTool/crt0"}],"collapsed":true,"collapsible":true,"href":"/fpga_mafia_wiki/docs/TFM/projectTool/gcc_intro"},{"type":"category","label":"git & github","items":[{"type":"link","label":"version_control","href":"/fpga_mafia_wiki/docs/TFM/projectTool/version_control","docId":"TFM/projectTool/version_control"},{"type":"link","label":"Git and GitHub","href":"/fpga_mafia_wiki/docs/TFM/projectTool/git_and_github","docId":"TFM/projectTool/git_and_github"},{"type":"link","label":"git_cheat_sheet","href":"/fpga_mafia_wiki/docs/TFM/projectTool/git_cheat_sheet","docId":"TFM/projectTool/git_cheat_sheet"},{"type":"link","label":"Github actions","href":"/fpga_mafia_wiki/docs/TFM/projectTool/GitHubActions","docId":"TFM/projectTool/GitHubActions"},{"type":"link","label":"git_hub_projects","href":"/fpga_mafia_wiki/docs/TFM/projectTool/git_hub_projects","docId":"TFM/projectTool/git_hub_projects"},{"type":"link","label":"git_hub_tfm","href":"/fpga_mafia_wiki/docs/TFM/projectTool/git_hub_tfm","docId":"TFM/projectTool/git_hub_tfm"}],"collapsed":true,"collapsible":true,"href":"/fpga_mafia_wiki/docs/TFM/projectTool/intro"},{"type":"category","label":"System Verilog","items":[{"type":"link","label":"Common examples","href":"/fpga_mafia_wiki/docs/TFM/verilog/examples","docId":"TFM/verilog/examples"},{"type":"link","label":"Intro to System-Verilog","href":"/fpga_mafia_wiki/docs/TFM/verilog/basic_concepts","docId":"TFM/verilog/basic_concepts"},{"type":"link","label":"SystemVerilog Types","href":"/fpga_mafia_wiki/docs/TFM/verilog/sv_types","docId":"TFM/verilog/sv_types"},{"type":"link","label":"Multiple dimensional arrays","href":"/fpga_mafia_wiki/docs/TFM/verilog/multi_dim_array","docId":"TFM/verilog/multi_dim_array"},{"type":"link","label":"Coding Style","href":"/fpga_mafia_wiki/docs/TFM/verilog/coding_style","docId":"TFM/verilog/coding_style"},{"type":"link","label":"pre-compiler include , define & macros","href":"/fpga_mafia_wiki/docs/TFM/verilog/pre_compile","docId":"TFM/verilog/pre_compile"}],"collapsed":true,"collapsible":true,"href":"/fpga_mafia_wiki/docs/TFM/verilog/intro"},{"type":"link","label":"TFM_Sanity","href":"/fpga_mafia_wiki/docs/TFM/projectTool/TFM_Sanity","docId":"TFM/projectTool/TFM_Sanity"}],"MAFIA_Build":[{"type":"link","label":"Intro","href":"/fpga_mafia_wiki/docs/build_script/intro","docId":"build_script/intro"},{"type":"link","label":"getting started","href":"/fpga_mafia_wiki/docs/build_script/getting_started","docId":"build_script/getting_started"},{"type":"link","label":"SW Compile","href":"/fpga_mafia_wiki/docs/build_script/SW_compile","docId":"build_script/SW_compile"},{"type":"link","label":"HW Compile","href":"/fpga_mafia_wiki/docs/build_script/HW_compile","docId":"build_script/HW_compile"},{"type":"link","label":"HW elaboration & simulation","href":"/fpga_mafia_wiki/docs/build_script/HW_elab_simulate","docId":"build_script/HW_elab_simulate"},{"type":"link","label":"advanced build options","href":"/fpga_mafia_wiki/docs/build_script/advanced_build_options","docId":"build_script/advanced_build_options"},{"type":"link","label":"HW GUI - debug","href":"/fpga_mafia_wiki/docs/build_script/HW_gui_debug","docId":"build_script/HW_gui_debug"},{"type":"link","label":"Build Options & Examples","href":"/fpga_mafia_wiki/docs/build_script/BuildOptions","docId":"build_script/BuildOptions"},{"type":"link","label":"Build GUI - command generator","href":"/fpga_mafia_wiki/docs/build_script/build_gui","docId":"build_script/build_gui"},{"type":"link","label":"cmd_handbook","href":"/fpga_mafia_wiki/docs/build_script/cmd_handbook","docId":"build_script/cmd_handbook"},{"type":"link","label":"mafia_scripts","href":"/fpga_mafia_wiki/docs/build_script/mafia_scripts","docId":"build_script/mafia_scripts"}],"FPGA":[{"type":"link","label":"intro","href":"/fpga_mafia_wiki/docs/fpga/fpga_intro","docId":"fpga/fpga_intro"},{"type":"category","label":"snake_game","items":[{"type":"link","label":"top_file","href":"/fpga_mafia_wiki/docs/fpga/snake_game/top_file","docId":"fpga/snake_game/top_file"},{"type":"link","label":"connect_uart","href":"/fpga_mafia_wiki/docs/fpga/snake_game/connect_uart","docId":"fpga/snake_game/connect_uart"},{"type":"link","label":"connect_joystick","href":"/fpga_mafia_wiki/docs/fpga/snake_game/connect_joystick","docId":"fpga/snake_game/connect_joystick"},{"type":"link","label":"compile","href":"/fpga_mafia_wiki/docs/fpga/snake_game/compile","docId":"fpga/snake_game/compile"},{"type":"link","label":"program_mem","href":"/fpga_mafia_wiki/docs/fpga/snake_game/program_mem","docId":"fpga/snake_game/program_mem"}],"collapsed":true,"collapsible":true,"href":"/fpga_mafia_wiki/docs/fpga/snake_game/snake_game_intro"}],"IPs":[{"type":"link","label":"IPs_intro","href":"/fpga_mafia_wiki/docs/IPs/IPs_intro","docId":"IPs/IPs_intro"},{"type":"link","label":"VGA","href":"/fpga_mafia_wiki/docs/IPs/vga","docId":"IPs/vga"},{"type":"link","label":"UART","href":"/fpga_mafia_wiki/docs/IPs/uart","docId":"IPs/uart"},{"type":"link","label":"PS2","href":"/fpga_mafia_wiki/docs/IPs/ps2_keyboard","docId":"IPs/ps2_keyboard"}],"Cache":[{"type":"link","label":"Intro","href":"/fpga_mafia_wiki/docs/cache/cache_intro","docId":"cache/cache_intro"},{"type":"link","label":"Cheat Sheet","href":"/fpga_mafia_wiki/docs/cache/cheat_sheet","docId":"cache/cheat_sheet"},{"type":"link","label":"HAS","href":"/fpga_mafia_wiki/docs/cache/HAS/HAS_intro","docId":"cache/HAS/HAS_intro"},{"type":"category","label":"MAS","items":[{"type":"link","label":"Data Cache - MAS","href":"/fpga_mafia_wiki/docs/cache/MAS/d_cache","docId":"cache/MAS/d_cache"},{"type":"link","label":"Pipe","href":"/fpga_mafia_wiki/docs/cache/MAS/pipe","docId":"cache/MAS/pipe"},{"type":"link","label":"tag_data_arrays","href":"/fpga_mafia_wiki/docs/cache/MAS/tag_data_arrays","docId":"cache/MAS/tag_data_arrays"},{"type":"link","label":"tq_entry","href":"/fpga_mafia_wiki/docs/cache/MAS/tq_entry","docId":"cache/MAS/tq_entry"},{"type":"link","label":"tq","href":"/fpga_mafia_wiki/docs/cache/MAS/tq","docId":"cache/MAS/tq"}],"collapsed":true,"collapsible":true,"href":"/fpga_mafia_wiki/docs/cache/MAS/MAS_intro"},{"type":"category","label":"Verification","items":[{"type":"link","label":"cache reference model","href":"/fpga_mafia_wiki/docs/cache/Verif/refModel","docId":"cache/Verif/refModel"},{"type":"link","label":"trackers","href":"/fpga_mafia_wiki/docs/cache/Verif/trackers","docId":"cache/Verif/trackers"},{"type":"link","label":"Post Process and trackers","href":"/fpga_mafia_wiki/docs/cache/Verif/post_proccess","docId":"cache/Verif/post_proccess"},{"type":"link","label":"Dedicated Test Intro","href":"/fpga_mafia_wiki/docs/cache/Verif/Dedicated_test","docId":"cache/Verif/Dedicated_test"},{"type":"link","label":"Random_and_stress","href":"/fpga_mafia_wiki/docs/cache/Verif/Random_and_stress","docId":"cache/Verif/Random_and_stress"}],"collapsed":true,"collapsible":true,"href":"/fpga_mafia_wiki/docs/cache/Verif/verif_intro"}],"RISCV_Cores":[{"type":"link","label":"intro","href":"/fpga_mafia_wiki/docs/rvc/intro","docId":"rvc/intro"},{"type":"category","label":"Single cycle core","items":[{"type":"link","label":"macros","href":"/fpga_mafia_wiki/docs/rvc/sc_core/macros","docId":"rvc/sc_core/macros"},{"type":"link","label":"sc_core_pkg","href":"/fpga_mafia_wiki/docs/rvc/sc_core/sc_core_pkg","docId":"rvc/sc_core/sc_core_pkg"},{"type":"link","label":"sc_core","href":"/fpga_mafia_wiki/docs/rvc/sc_core/","docId":"rvc/sc_core/sc_core"}],"collapsed":true,"collapsible":true,"href":"/fpga_mafia_wiki/docs/rvc/sc_core/intro"},{"type":"category","label":"Common Components","items":[{"type":"link","label":"if","href":"/fpga_mafia_wiki/docs/rvc/common/if","docId":"rvc/common/if"},{"type":"link","label":"decode","href":"/fpga_mafia_wiki/docs/rvc/common/decode","docId":"rvc/common/decode"},{"type":"link","label":"rf","href":"/fpga_mafia_wiki/docs/rvc/common/rf","docId":"rvc/common/rf"},{"type":"link","label":"exe","href":"/fpga_mafia_wiki/docs/rvc/common/exe","docId":"rvc/common/exe"},{"type":"link","label":"mem_acs","href":"/fpga_mafia_wiki/docs/rvc/common/mem_acs","docId":"rvc/common/mem_acs"},{"type":"link","label":"wb","href":"/fpga_mafia_wiki/docs/rvc/common/wb","docId":"rvc/common/wb"},{"type":"link","label":"ctrl","href":"/fpga_mafia_wiki/docs/rvc/common/ctrl","docId":"rvc/common/ctrl"}],"collapsed":true,"collapsible":true,"href":"/fpga_mafia_wiki/docs/rvc/common/intro"},{"type":"category","label":"Big Core","items":[{"type":"link","label":"big_core_top","href":"/fpga_mafia_wiki/docs/rvc/big_core/big_core_top","docId":"rvc/big_core/big_core_top"},{"type":"link","label":"big_core","href":"/fpga_mafia_wiki/docs/rvc/big_core/","docId":"rvc/big_core/big_core"},{"type":"link","label":"mem_wrap","href":"/fpga_mafia_wiki/docs/rvc/big_core/mem_wrap","docId":"rvc/big_core/mem_wrap"},{"type":"link","label":"csr_registers","href":"/fpga_mafia_wiki/docs/rvc/big_core/csr_registers","docId":"rvc/big_core/csr_registers"},{"type":"link","label":"cr_mem","href":"/fpga_mafia_wiki/docs/rvc/big_core/cr_mem","docId":"rvc/big_core/cr_mem"},{"type":"link","label":"pmon","href":"/fpga_mafia_wiki/docs/rvc/big_core/pmon","docId":"rvc/big_core/pmon"},{"type":"link","label":"exceptions","href":"/fpga_mafia_wiki/docs/rvc/big_core/exceptions","docId":"rvc/big_core/exceptions"}],"collapsed":true,"collapsible":true,"href":"/fpga_mafia_wiki/docs/rvc/big_core/intro"},{"type":"category","label":"Mini Core","items":[{"type":"link","label":"mini_core_top","href":"/fpga_mafia_wiki/docs/rvc/mini_core/mini_core_top","docId":"rvc/mini_core/mini_core_top"},{"type":"link","label":"mini_core","href":"/fpga_mafia_wiki/docs/rvc/mini_core/","docId":"rvc/mini_core/mini_core"},{"type":"link","label":"mini_core_mem_wrap","href":"/fpga_mafia_wiki/docs/rvc/mini_core/mini_core_mem_wrap","docId":"rvc/mini_core/mini_core_mem_wrap"}],"collapsed":true,"collapsible":true,"href":"/fpga_mafia_wiki/docs/rvc/mini_core/intro"},{"type":"category","label":"Core Verification","items":[{"type":"link","label":"elf_tests","href":"/fpga_mafia_wiki/docs/rvc/core_verification/elf_tests","docId":"rvc/core_verification/elf_tests"},{"type":"link","label":"regressions","href":"/fpga_mafia_wiki/docs/rvc/core_verification/regressions","docId":"rvc/core_verification/regressions"},{"type":"link","label":"rv32i_ref_model","href":"/fpga_mafia_wiki/docs/rvc/core_verification/rv32i_ref_model","docId":"rvc/core_verification/rv32i_ref_model"},{"type":"link","label":"print_sanity","href":"/fpga_mafia_wiki/docs/rvc/core_verification/print_sanity","docId":"rvc/core_verification/print_sanity"},{"type":"link","label":"checker_tasks","href":"/fpga_mafia_wiki/docs/rvc/core_verification/checker_tasks","docId":"rvc/core_verification/checker_tasks"},{"type":"link","label":"verification_mini_core","href":"/fpga_mafia_wiki/docs/rvc/core_verification/verification_mini_core","docId":"rvc/core_verification/verification_mini_core"}],"collapsed":true,"collapsible":true,"href":"/fpga_mafia_wiki/docs/rvc/core_verification/intro"},{"type":"link","label":"SW libraries","href":"/fpga_mafia_wiki/docs/rvc/sw_libraries","docId":"rvc/sw_libraries"}],"Fabric":[{"type":"link","label":"intro","href":"/fpga_mafia_wiki/docs/fabric/intro","docId":"fabric/intro"},{"type":"category","label":"Fabric HAS","items":[{"type":"link","label":"Fabric MAS","href":"/fpga_mafia_wiki/docs/fabric/MAS_fabric/","docId":"fabric/MAS_fabric/mas_fabric"},{"type":"link","label":"Mini_core_tile MAS","href":"/fpga_mafia_wiki/docs/fabric/MAS_fabric/mas_mini_core_tile","docId":"fabric/MAS_fabric/mas_mini_core_tile"}],"collapsed":true,"collapsible":true,"href":"/fpga_mafia_wiki/docs/fabric/MAS_fabric/mas_intro"},{"type":"category","label":"Router HAS","items":[{"type":"link","label":"Router MAS","href":"/fpga_mafia_wiki/docs/fabric/MAS_router/","docId":"fabric/MAS_router/mas_router"},{"type":"link","label":"Next_tile_fifo_arb MAS","href":"/fpga_mafia_wiki/docs/fabric/MAS_router/mas_next_tile_fifo_arb","docId":"fabric/MAS_router/mas_next_tile_fifo_arb"},{"type":"link","label":"FIFO_arb MAS","href":"/fpga_mafia_wiki/docs/fabric/MAS_router/mas_fifo_arb","docId":"fabric/MAS_router/mas_fifo_arb"},{"type":"link","label":"Arbiter MAS","href":"/fpga_mafia_wiki/docs/fabric/MAS_router/mas_arbiter","docId":"fabric/MAS_router/mas_arbiter"},{"type":"link","label":"FIFO MAS","href":"/fpga_mafia_wiki/docs/fabric/MAS_router/mas_fifo","docId":"fabric/MAS_router/mas_fifo"}],"collapsed":true,"collapsible":true,"href":"/fpga_mafia_wiki/docs/fabric/MAS_router/mas_intro"},{"type":"category","label":"Fabric Verification","items":[{"type":"link","label":"verification_fabric","href":"/fpga_mafia_wiki/docs/fabric/verification/verification_fabric","docId":"fabric/verification/verification_fabric"},{"type":"link","label":"verification_fifo_arb","href":"/fpga_mafia_wiki/docs/fabric/verification/verification_fifo_arb","docId":"fabric/verification/verification_fifo_arb"}],"collapsed":true,"collapsible":true,"href":"/fpga_mafia_wiki/docs/fabric/verification/verification_intro"}]},"docs":{"big_core/intro":{"id":"big_core/intro","title":"Big Core Intro","description":""},"big_core/MAS/big_core_top":{"id":"big_core/MAS/big_core_top","title":"Big Core Top","description":""},"big_core/MAS/intro":{"id":"big_core/MAS/intro","title":"Big Core Intro","description":""},"big_core/MAS/mem_wrap":{"id":"big_core/MAS/mem_wrap","title":"Memory Wrapper","description":"Introduction"},"build_script/advanced_build_options":{"id":"build_script/advanced_build_options","title":"advanced build options","description":"If you examine the commands executed in the background during this stage, you will notice various parameters being defined, such as memory length, the crt0.s file, and more. You have the option to modify some of these parameters by using the -cfg` flag and providing a configuration.json file.","sidebar":"MAFIA_Build"},"build_script/build_gui":{"id":"build_script/build_gui","title":"Build GUI","description":"In general we recommend working directly from the command line without gui.","sidebar":"MAFIA_Build"},"build_script/BuildOptions":{"id":"build_script/BuildOptions","title":"The MAFIA Build Flow","description":"","sidebar":"MAFIA_Build"},"build_script/cmd_handbook":{"id":"build_script/cmd_handbook","title":"cmd_handbook","description":"run software compilation","sidebar":"MAFIA_Build"},"build_script/getting_started":{"id":"build_script/getting_started","title":"getting_started","description":"Setting Git user name and email (only if it is your first time using Git)","sidebar":"MAFIA_Build"},"build_script/HW_compile":{"id":"build_script/HW_compile","title":"HW Compilation","description":"Hardware compilation is a process where we compile HDL files (In our case, we\'re working with System Verilog files) of our unit (In our case, we\'re working with minicore). During this process, we also load a file called \'instmem.sv\' that was created from \'basics.c\' into the instruction memory of the mini_core.","sidebar":"MAFIA_Build"},"build_script/HW_elab_simulate":{"id":"build_script/HW_elab_simulate","title":"HW elaboration and simulation","description":"Elaboration creates a hierarchical representation of the design by connecting modules and resolving dependencies between them.","sidebar":"MAFIA_Build"},"build_script/HW_gui_debug":{"id":"build_script/HW_gui_debug","title":"The MAFIA Build Flow","description":"","sidebar":"MAFIA_Build"},"build_script/intro":{"id":"build_script/intro","title":"intro","description":"The MAFIA Build Flow","sidebar":"MAFIA_Build"},"build_script/mafia_scripts":{"id":"build_script/mafia_scripts","title":"mafia_scripts","description":"sanity_check.py","sidebar":"MAFIA_Build"},"build_script/SW_compile":{"id":"build_script/SW_compile","title":"SW Compilation","description":"In this section we will write a basic C program and compile the software part of the project.","sidebar":"MAFIA_Build"},"cache/ABD_notes":{"id":"cache/ABD_notes","title":"ABD Notes - tests: number 4","description":"I gave some thought in to how to resolve the back2back request and this is what I produced:"},"cache/Appendix":{"id":"cache/Appendix","title":"Appendix","description":"Future Features"},"cache/Assumption_Assertions":{"id":"cache/Assumption_Assertions","title":"Assumption & Assertions","description":"Core Interface Assumption:"},"cache/cache_intro":{"id":"cache/cache_intro","title":"","description":"Noam Sabban","sidebar":"Cache"},"cache/cache_overview":{"id":"cache/cache_overview","title":"Overview","description":"This HAS (High-Level-Architecture-Specification) will describe the Cache DUT"},"cache/cheat_sheet":{"id":"cache/cheat_sheet","title":"cheat_sheet","description":"A","sidebar":"Cache"},"cache/HAS/HAS_intro":{"id":"cache/HAS/HAS_intro","title":"Cache HAS - High Level Specification","description":"References","sidebar":"Cache"},"cache/High_level_block_description":{"id":"cache/High_level_block_description","title":"High Level Block Description","description":"Transaction Queue (TQ)"},"cache/High_level_Transaction_Flows":{"id":"cache/High_level_Transaction_Flows","title":"High level Transaction Flows","description":"In this chapter will describe the high-level transaction Flow."},"cache/MAS/d_cache":{"id":"cache/MAS/d_cache","title":"Data Cache - MAS","description":"The data cache Micro-Architecture-Specification","sidebar":"Cache"},"cache/MAS/MAS_intro":{"id":"cache/MAS/MAS_intro","title":"This is the Cache Micro-Architecture-Specification","description":"","sidebar":"Cache"},"cache/MAS/pipe":{"id":"cache/MAS/pipe","title":"Pipe","description":"This module represents the data cache pipeline that efficiently handles cache operations, data hazards, tag comparisons, cache misses and communicates with other components. The pipeline consists of several stages, each responsible for specific tasks.","sidebar":"Cache"},"cache/MAS/tag_data_arrays":{"id":"cache/MAS/tag_data_arrays","title":"tag_data_arrays","description":"","sidebar":"Cache"},"cache/MAS/tq":{"id":"cache/MAS/tq","title":"tq","description":"","sidebar":"Cache"},"cache/MAS/tq_entry":{"id":"cache/MAS/tq_entry","title":"tq_entry","description":"The transaction queue entry Micro-Architecture-Specification","sidebar":"Cache"},"cache/Merge_Buffer_Behavior":{"id":"cache/Merge_Buffer_Behavior","title":"Merge Buffer Behavior","description":"In this chapter we will explain the Merge Buffer behavior through different cases"},"cache/Verif/Dedicated_test":{"id":"cache/Verif/Dedicated_test","title":"Dedicated Test Intro","description":"We conduct a series of  tests in our test bench to validate specific features and verify various cases that the cache might encounter during operation.","sidebar":"Cache"},"cache/Verif/post_proccess":{"id":"cache/Verif/post_proccess","title":"Post Process and trackers","description":"Cache_pp","sidebar":"Cache"},"cache/Verif/Random_and_stress":{"id":"cache/Verif/Random_and_stress","title":"Random_and_stress","description":"","sidebar":"Cache"},"cache/Verif/refModel":{"id":"cache/Verif/refModel","title":"cache reference model","description":"table of contents","sidebar":"Cache"},"cache/Verif/trackers":{"id":"cache/Verif/trackers","title":"trackers","description":"Cache_trk","sidebar":"Cache"},"cache/Verif/verif_intro":{"id":"cache/Verif/verif_intro","title":"Verification Intro","description":"The verification of the Cache DUT has multiple aspects.","sidebar":"Cache"},"cache/Verification":{"id":"cache/Verification","title":"Verification","description":"In this section we will write a list of scenarios and points we want to cover"},"contact_us/contact":{"id":"contact_us/contact","title":"Contact Us","description":"Please feel free to get in touch with us using the following contact information:"},"fabric/intro":{"id":"fabric/intro","title":"","description":"Shmuel Sfez","sidebar":"Fabric"},"fabric/MAS_fabric/mas_fabric":{"id":"fabric/MAS_fabric/mas_fabric","title":"Fabric MAS","description":"1. Overview","sidebar":"Fabric"},"fabric/MAS_fabric/mas_intro":{"id":"fabric/MAS_fabric/mas_intro","title":"Fabric Intro","description":"","sidebar":"Fabric"},"fabric/MAS_fabric/mas_mini_core_tile":{"id":"fabric/MAS_fabric/mas_mini_core_tile","title":"Mini_core_tile MAS","description":"1. Overview","sidebar":"Fabric"},"fabric/MAS_router/mas_arbiter":{"id":"fabric/MAS_router/mas_arbiter","title":"Arbiter MAS","description":"Brief Description:","sidebar":"Fabric"},"fabric/MAS_router/mas_fifo":{"id":"fabric/MAS_router/mas_fifo","title":"FIFO MAS","description":"Brief Description:","sidebar":"Fabric"},"fabric/MAS_router/mas_fifo_arb":{"id":"fabric/MAS_router/mas_fifo_arb","title":"FIFO_arb MAS","description":"Brief Description:","sidebar":"Fabric"},"fabric/MAS_router/mas_intro":{"id":"fabric/MAS_router/mas_intro","title":"Router Intro","description":"","sidebar":"Fabric"},"fabric/MAS_router/mas_next_tile_fifo_arb":{"id":"fabric/MAS_router/mas_next_tile_fifo_arb","title":"Next_tile_fifo_arb MAS","description":"Brief Description:","sidebar":"Fabric"},"fabric/MAS_router/mas_router":{"id":"fabric/MAS_router/mas_router","title":"Router MAS","description":"Brief Description:","sidebar":"Fabric"},"fabric/verification/verification_fabric":{"id":"fabric/verification/verification_fabric","title":"verification_fabric","description":"Strategy","sidebar":"Fabric"},"fabric/verification/verification_fifo_arb":{"id":"fabric/verification/verification_fifo_arb","title":"verification_fifo_arb","description":"Strategy","sidebar":"Fabric"},"fabric/verification/verification_intro":{"id":"fabric/verification/verification_intro","title":"Fabric Verification Intro","description":"This chapter will describe the verification agenda of the Fabric.","sidebar":"Fabric"},"fpga/fpga_intro":{"id":"fpga/fpga_intro","title":"fpga_intro","description":"Welcome! If you\'ve reached this point, congratulations on a job well done. In this section, we\'ll learn the process of implementing Mafia cores on the FPGA DE10 Lite.","sidebar":"FPGA"},"fpga/snake_game/compile":{"id":"fpga/snake_game/compile","title":"compile","description":"","sidebar":"FPGA"},"fpga/snake_game/connect_joystick":{"id":"fpga/snake_game/connect_joystick","title":"connect_joystick","description":"","sidebar":"FPGA"},"fpga/snake_game/connect_uart":{"id":"fpga/snake_game/connect_uart","title":"connect_uart","description":"","sidebar":"FPGA"},"fpga/snake_game/program_mem":{"id":"fpga/snake_game/program_mem","title":"program_mem","description":"","sidebar":"FPGA"},"fpga/snake_game/snake_game_intro":{"id":"fpga/snake_game/snake_game_intro","title":"snake_game_intro","description":"","sidebar":"FPGA"},"fpga/snake_game/top_file":{"id":"fpga/snake_game/top_file","title":"top_file","description":"","sidebar":"FPGA"},"intro":{"id":"intro","title":"Tutorial Intro","description":"Let\'s discover Docusaurus in less than 5 minutes."},"IPs/IPs_intro":{"id":"IPs/IPs_intro","title":"IPs_intro","description":"In order to communicate with the outside world, we use three IPs: VGA, UART and Keyboard.","sidebar":"IPs"},"IPs/ps2_keyboard":{"id":"IPs/ps2_keyboard","title":"ps2_keyboard","description":"","sidebar":"IPs"},"IPs/uart":{"id":"IPs/uart","title":"uart","description":"In that section we are going to briefly explain how the UART IP works and how to use it in our project. For complete information about the UART IP and how its implemented, please refer to the UART Tile Project documentation.","sidebar":"IPs"},"IPs/vga":{"id":"IPs/vga","title":"vga","description":"Memory mapped I/O approach to access the VGA","sidebar":"IPs"},"rvc/big_core/big_core":{"id":"rvc/big_core/big_core","title":"big_core","description":"big_core.md","sidebar":"RISCV_Cores"},"rvc/big_core/big_core_top":{"id":"rvc/big_core/big_core_top","title":"big_core_top","description":"bigcoretop.md","sidebar":"RISCV_Cores"},"rvc/big_core/cr_mem":{"id":"rvc/big_core/cr_mem","title":"cr_mem","description":"CR_MEM","sidebar":"RISCV_Cores"},"rvc/big_core/csr_registers":{"id":"rvc/big_core/csr_registers","title":"csr_registers","description":"Introduction","sidebar":"RISCV_Cores"},"rvc/big_core/exceptions":{"id":"rvc/big_core/exceptions","title":"exceptions","description":"Introduction","sidebar":"RISCV_Cores"},"rvc/big_core/intro":{"id":"rvc/big_core/intro","title":"intro","description":"intro.md","sidebar":"RISCV_Cores"},"rvc/big_core/mem_wrap":{"id":"rvc/big_core/mem_wrap","title":"mem_wrap","description":"Introduction","sidebar":"RISCV_Cores"},"rvc/big_core/pmon":{"id":"rvc/big_core/pmon","title":"pmon","description":"Performance Monitor","sidebar":"RISCV_Cores"},"rvc/common/ctrl":{"id":"rvc/common/ctrl","title":"ctrl","description":"mini_core controller","sidebar":"RISCV_Cores"},"rvc/common/decode":{"id":"rvc/common/decode","title":"decode","description":"- The decode stage is the second stage in the pipeline also know as Q101H stage (in our coding style). The goal of that stage is to decode the instruction and read the register file.","sidebar":"RISCV_Cores"},"rvc/common/exe":{"id":"rvc/common/exe","title":"exe","description":"execution stage","sidebar":"RISCV_Cores"},"rvc/common/if":{"id":"rvc/common/if","title":"if","description":"Instruction fetch","sidebar":"RISCV_Cores"},"rvc/common/intro":{"id":"rvc/common/intro","title":"The Mini Core","description":"- Mini core is a RISC-V core that supports the RV32I and RV32E instruction set. The core is pipelined and has 5 stages: IF, ID, EX, MEM, WB. The core is written in SystemVerilog. The core is written in a modular way, so it is easy to add or remove modules.","sidebar":"RISCV_Cores"},"rvc/common/mem_acs":{"id":"rvc/common/mem_acs","title":"mem_acs","description":"memory access stage","sidebar":"RISCV_Cores"},"rvc/common/rf":{"id":"rvc/common/rf","title":"rf","description":"Register File","sidebar":"RISCV_Cores"},"rvc/common/wb":{"id":"rvc/common/wb","title":"wb","description":"write back stage","sidebar":"RISCV_Cores"},"rvc/core_verification/checker_tasks":{"id":"rvc/core_verification/checker_tasks","title":"checker_tasks","description":"minicoretasks.vh","sidebar":"RISCV_Cores"},"rvc/core_verification/elf_tests":{"id":"rvc/core_verification/elf_tests","title":"elf_tests","description":"rv32irefmodel","sidebar":"RISCV_Cores"},"rvc/core_verification/intro":{"id":"rvc/core_verification/intro","title":"intro","description":"intro.md","sidebar":"RISCV_Cores"},"rvc/core_verification/print_sanity":{"id":"rvc/core_verification/print_sanity","title":"print_sanity","description":"rv32irefmodel","sidebar":"RISCV_Cores"},"rvc/core_verification/regressions":{"id":"rvc/core_verification/regressions","title":"regressions","description":"rv32irefmodel","sidebar":"RISCV_Cores"},"rvc/core_verification/rv32i_ref_model":{"id":"rvc/core_verification/rv32i_ref_model","title":"rv32i_ref_model","description":"rv32irefmodel","sidebar":"RISCV_Cores"},"rvc/core_verification/verification_mini_core":{"id":"rvc/core_verification/verification_mini_core","title":"verification_mini_core","description":"Strategy","sidebar":"RISCV_Cores"},"rvc/intro":{"id":"rvc/intro","title":"intro","description":"Making a CPU is tough work. It needs big teams to build a powerful and modern CPU, considering things like power usage, size, and speed. But all modern CPUs go through the same steps, which we\'ll explain here: fetching data (IF), decoding it, doing the actual work (EXE), getting data from memory (MEM-ACS), saving results (WB), and a controller that manages everything.","sidebar":"RISCV_Cores"},"rvc/mini_core/intro":{"id":"rvc/mini_core/intro","title":"intro","description":"intro.md","sidebar":"RISCV_Cores"},"rvc/mini_core/mini_core":{"id":"rvc/mini_core/mini_core","title":"mini_core","description":"mini_core.md","sidebar":"RISCV_Cores"},"rvc/mini_core/mini_core_mem_wrap":{"id":"rvc/mini_core/mini_core_mem_wrap","title":"mini_core_mem_wrap","description":"minicoremem_wrap.md","sidebar":"RISCV_Cores"},"rvc/mini_core/mini_core_top":{"id":"rvc/mini_core/mini_core_top","title":"mini_core_top","description":"minicoretop.md","sidebar":"RISCV_Cores"},"rvc/sc_core/intro":{"id":"rvc/sc_core/intro","title":"intro","description":"In that section we will explain cpu stages and how to build a cpu based on the sc_core cpu.","sidebar":"RISCV_Cores"},"rvc/sc_core/macros":{"id":"rvc/sc_core/macros","title":"macros","description":"macros.sv file","sidebar":"RISCV_Cores"},"rvc/sc_core/sc_core":{"id":"rvc/sc_core/sc_core","title":"sc_core","description":"sc_core.sv file","sidebar":"RISCV_Cores"},"rvc/sc_core/sc_core_pkg":{"id":"rvc/sc_core/sc_core_pkg","title":"sc_core_pkg","description":"sccorepkg.sv file","sidebar":"RISCV_Cores"},"rvc/sw_libraries":{"id":"rvc/sw_libraries","title":"sw_libraries","description":"","sidebar":"RISCV_Cores"},"TFM/projectTool/bashrc":{"id":"TFM/projectTool/bashrc","title":"bashrc","description":"~/.bashrc file is like a user\'s personal command line settings file in Linux. It\'s used to:","sidebar":"TFM"},"TFM/projectTool/basic_example":{"id":"TFM/projectTool/basic_example","title":"basic_example","description":"Welcome to FPGA world!","sidebar":"TFM"},"TFM/projectTool/crt0":{"id":"TFM/projectTool/crt0","title":"crt0","description":"We\'ve come across the crt0.s file while working on creating *.elf files, but we haven\'t explored why this file is important.","sidebar":"TFM"},"TFM/projectTool/de10_lite":{"id":"TFM/projectTool/de10_lite","title":"de10_lite","description":"The DE10-Lite is an FPGA (Field-Programmable Gate Array) development board produced by Terasic, a company that specializes in FPGA development boards and solutions. The DE10-Lite board is designed for educational and hobbyist purposes, offering a cost-effective way to learn and experiment with FPGA technology.","sidebar":"TFM"},"TFM/projectTool/docusaurus":{"id":"TFM/projectTool/docusaurus","title":"Docusaurus","description":"We recommend using the Docusaurus tool to create and maintain the documentation for your project.","sidebar":"TFM"},"TFM/projectTool/drawio":{"id":"TFM/projectTool/drawio","title":"drawio","description":"This extension simply integrates Draw.io into vs code"},"TFM/projectTool/extensions":{"id":"TFM/projectTool/extensions","title":"extensions","description":"In this section, we\'ll discuss some helpful VS Code extensions. Keep in mind that these extensions may change over time, so their names and descriptions could be different.","sidebar":"TFM"},"TFM/projectTool/gcc_intro":{"id":"TFM/projectTool/gcc_intro","title":"gcc_intro","description":"RISCV GCC","sidebar":"TFM"},"TFM/projectTool/GccRiscV":{"id":"TFM/projectTool/GccRiscV","title":"GccRiscV","description":"RISCV GCC Installation","sidebar":"TFM"},"TFM/projectTool/git_and_github":{"id":"TFM/projectTool/git_and_github","title":"Git and GitHub","description":"Motivation for using git","sidebar":"TFM"},"TFM/projectTool/git_cheat_sheet":{"id":"TFM/projectTool/git_cheat_sheet","title":"git_cheat_sheet","description":"Coming soon...","sidebar":"TFM"},"TFM/projectTool/git_hub_projects":{"id":"TFM/projectTool/git_hub_projects","title":"git_hub_projects","description":"Coming soon...","sidebar":"TFM"},"TFM/projectTool/git_hub_tfm":{"id":"TFM/projectTool/git_hub_tfm","title":"git_hub_tfm","description":"Coming soon...","sidebar":"TFM"},"TFM/projectTool/GitBash":{"id":"TFM/projectTool/GitBash","title":"GitBash","description":"Git Bash","sidebar":"TFM"},"TFM/projectTool/GitHubActions":{"id":"TFM/projectTool/GitHubActions","title":"Github actions","description":"Overview of Actions and Workflows","sidebar":"TFM"},"TFM/projectTool/hw_compile":{"id":"TFM/projectTool/hw_compile","title":"hw_compile","description":"Compilation","sidebar":"TFM"},"TFM/projectTool/hw_elab":{"id":"TFM/projectTool/hw_elab","title":"hw_elab","description":"Elaboration","sidebar":"TFM"},"TFM/projectTool/hw_gui_debug":{"id":"TFM/projectTool/hw_gui_debug","title":"hw_gui_debug","description":"Coming soon...","sidebar":"TFM"},"TFM/projectTool/hw_sim":{"id":"TFM/projectTool/hw_sim","title":"hw_sim","description":"Elaboration & simulation","sidebar":"TFM"},"TFM/projectTool/IDE":{"id":"TFM/projectTool/IDE","title":"IDE - Integrated Development Environment","description":"In this part, we\'ll explain the software setup required to run Mafia in the future.","sidebar":"TFM"},"TFM/projectTool/intro":{"id":"TFM/projectTool/intro","title":"intro","description":"","sidebar":"TFM"},"TFM/projectTool/linker":{"id":"TFM/projectTool/linker","title":"linker","description":"In the GCC RISC-V toolchain, a linker file, also known as a linker script, is a configuration file used by the linker (ld) to specify how a program\'s code and data should be organized in memory. It defines things like where the program\'s code starts, where data is stored, and how different sections are grouped together. Linker scripts are important for ensuring that the program runs correctly on a RISC-V system and can be customized to meet specific hardware requirements.","sidebar":"TFM"},"TFM/projectTool/markdown":{"id":"TFM/projectTool/markdown","title":"markdown","description":"Markdown is a lightweight markup language commonly used for creating formatted text documents that are easy to read and write, especially in plain text editors. Markdown files are plain text files with a specific syntax that allows you to add formatting, headings, links, lists, images, and more.","sidebar":"TFM"},"TFM/projectTool/mod3_cnt":{"id":"TFM/projectTool/mod3_cnt","title":"mod3_cnt","description":"7segcnt.png","sidebar":"TFM"},"TFM/projectTool/ModelSim":{"id":"TFM/projectTool/ModelSim","title":"ModelSim","description":"ModelSim"},"TFM/projectTool/modelsim_examples":{"id":"TFM/projectTool/modelsim_examples","title":"modelsim_examples","description":"Coming soon...","sidebar":"TFM"},"TFM/projectTool/modelsim_intro":{"id":"TFM/projectTool/modelsim_intro","title":"modelsim_intro","description":"ModelSim is a popular simulation and debugging tool primarily used for the design and verification of digital circuits and systems. It allows engineers and designers to simulate, test, and debug their hardware designs written in hardware description languages like VHDL  or in our case Verilog/System Verilog.","sidebar":"TFM"},"TFM/projectTool/python":{"id":"TFM/projectTool/python","title":"python","description":"Go ahead and get Python installed. We\'ll use Python scripts to handle stuff related to the mafia, which will make our lives a lot easier","sidebar":"TFM"},"TFM/projectTool/quartus_gui":{"id":"TFM/projectTool/quartus_gui","title":"quartus_gui","description":"Coming soon...","sidebar":"TFM"},"TFM/projectTool/quartus_intro":{"id":"TFM/projectTool/quartus_intro","title":"General Introduction","description":"Quartus Prime","sidebar":"TFM"},"TFM/projectTool/start":{"id":"TFM/projectTool/start","title":"start","description":"In this section, we\'ll begin by getting some basic programs."},"TFM/projectTool/sv-extensions":{"id":"TFM/projectTool/sv-extensions","title":"sv-extensions","description":""},"TFM/projectTool/TFM_Sanity":{"id":"TFM/projectTool/TFM_Sanity","title":"TFM Sanity","description":"In this chapter we will go thogh the list of tools & commands to make sure they are all installed correctly & working on your local machine.","sidebar":"TFM"},"TFM/projectTool/troubleshooting":{"id":"TFM/projectTool/troubleshooting","title":"troubleshooting","description":"Troubleshooting"},"TFM/projectTool/usb_blaster_driver":{"id":"TFM/projectTool/usb_blaster_driver","title":"usb_blaster_driver","description":"1. Type device manager in the windows search bar and open it."},"TFM/projectTool/version_control":{"id":"TFM/projectTool/version_control","title":"version_control","description":"Version Control: Keeping Track of Changes","sidebar":"TFM"},"TFM/projectTool/vs_code":{"id":"TFM/projectTool/vs_code","title":"vs_code","description":"VS Code","sidebar":"TFM"},"TFM/projectTool/Walkthrough":{"id":"TFM/projectTool/Walkthrough","title":"Walkthrough - tool-chain tutorial","description":"Download a text editor"},"TFM/verilog/basic_concepts":{"id":"TFM/verilog/basic_concepts","title":"Intro to System-Verilog","description":"System-Verilog vs Verilog","sidebar":"TFM"},"TFM/verilog/coding_style":{"id":"TFM/verilog/coding_style","title":"Coding Style","description":"Signal declaration","sidebar":"TFM"},"TFM/verilog/examples":{"id":"TFM/verilog/examples","title":"Common examples","description":"Mux","sidebar":"TFM"},"TFM/verilog/intro":{"id":"TFM/verilog/intro","title":"intro","description":"SystemVerilog is a hardware description and verification language used primarily in the field of digital design and electronic hardware development. It combines the features of the original Verilog hardware description language with additional constructs for system-level design and advanced verification.","sidebar":"TFM"},"TFM/verilog/multi_dim_array":{"id":"TFM/verilog/multi_dim_array","title":"Multiple dimensional arrays","description":"Packed vs Unpacked","sidebar":"TFM"},"TFM/verilog/pre_compile":{"id":"TFM/verilog/pre_compile","title":"pre-compiler include , define & macros","description":"`include","sidebar":"TFM"},"TFM/verilog/sv_types":{"id":"TFM/verilog/sv_types","title":"SystemVerilog Types","description":"reg, wire, logic","sidebar":"TFM"},"TFM/walkthrough_mafia":{"id":"TFM/walkthrough_mafia","title":"walkthrough_mafia","description":""},"TFM/welcome":{"id":"TFM/welcome","title":"TFM - Tools, Flows & Methodologies","description":"Here we will describe the Tools, Flows & methodologies (TFM) of this project.","sidebar":"TFM"}}}')}}]);