"use strict";(self.webpackChunkmy_docs=self.webpackChunkmy_docs||[]).push([[3594],{3905:(e,t,r)=>{r.d(t,{Zo:()=>s,kt:()=>d});var i=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,i)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,i,n=function(e,t){if(null==e)return{};var r,i,n={},a=Object.keys(e);for(i=0;i<a.length;i++)r=a[i],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)r=a[i],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var l=i.createContext({}),f=function(e){var t=i.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},s=function(e){var t=f(e.components);return i.createElement(l.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},m=i.forwardRef((function(e,t){var r=e.components,n=e.mdxType,a=e.originalType,l=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),p=f(r),m=n,d=p["".concat(l,".").concat(m)]||p[m]||u[m]||a;return r?i.createElement(d,o(o({ref:t},s),{},{components:r})):i.createElement(d,o({ref:t},s))}));function d(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var a=r.length,o=new Array(a);o[0]=m;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c[p]="string"==typeof e?e:n,o[1]=c;for(var f=2;f<a;f++)o[f]=r[f];return i.createElement.apply(null,o)}return i.createElement.apply(null,r)}m.displayName="MDXCreateElement"},9212:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>c,toc:()=>f});var i=r(7462),n=(r(7294),r(3905));const a={sidebar_position:1},o="Fabric Verification Intro",c={unversionedId:"fabric/verification/verification_intro",id:"fabric/verification/verification_intro",title:"Fabric Verification Intro",description:"This chapter will describe the verification agenda of the Fabric.",source:"@site/docs/fabric/verification/verification_intro.md",sourceDirName:"fabric/verification",slug:"/fabric/verification/verification_intro",permalink:"/fpga_mafia_wiki/docs/fabric/verification/verification_intro",draft:!1,editUrl:"https://github.com/FPGA-MAFIA/fpga_mafia_wiki/tree/main/docs/fabric/verification/verification_intro.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"Fabric",previous:{title:"FIFO MAS",permalink:"/fpga_mafia_wiki/docs/fabric/MAS_router/mas_fifo"},next:{title:"verification_fabric",permalink:"/fpga_mafia_wiki/docs/fabric/verification/verification_fabric"}},l={},f=[],s={toc:f},p="wrapper";function u(e){let{components:t,...r}=e;return(0,n.kt)(p,(0,i.Z)({},s,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"fabric-verification-intro"},"Fabric Verification Intro"),(0,n.kt)("p",null,"This chapter will describe the verification agenda of the Fabric."),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"In the fabric we have verified three main components - FIFO_arb, Fabric and Mini_core_tile.")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Each one of those components have its own uniqe enviroment that include TB, flow tasks, verification tasks and test lists."),(0,n.kt)("h2",{parentName:"li",id:"terms-that-will-be-used"},"Terms that will be used.")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"sequence - a sequence is a flow of activating a DUT.")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"test - a test is a scenario that we want to check, a test can contain more then one sequence.")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"TB - test bench - will activate our DUT and will connect it to the verification enviroment.")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Checkers - objects or components that will ensure the reliabilty of our design like data integrity checker and protocol checkers etc.")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"RM - reference model - a software object that will calculate the expected output of a DUT for each transaction that the DUT is getting.")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"fork join/join_any/join_none - a fork will create a number of threads that will run in parallel. The ending can be join i.e exit the fork only when all of the threads are over. join_any i.e exit the fork when one or more threads done. join_none - exit the fork even if no thred is done."))))}u.isMDXComponent=!0}}]);