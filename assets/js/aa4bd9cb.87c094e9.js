"use strict";(self.webpackChunkmy_docs=self.webpackChunkmy_docs||[]).push([[6032],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>f});var n=r(7294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var c=n.createContext({}),s=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},p=function(e){var t=s(e.components);return n.createElement(c.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,o=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=s(r),d=i,f=m["".concat(c,".").concat(d)]||m[d]||u[d]||o;return r?n.createElement(f,a(a({ref:t},p),{},{components:r})):n.createElement(f,a({ref:t},p))}));function f(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=r.length,a=new Array(o);a[0]=d;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[m]="string"==typeof e?e:i,a[1]=l;for(var s=2;s<o;s++)a[s]=r[s];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},1417:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var n=r(7462),i=(r(7294),r(3905));const o={},a="HW Compilation",l={unversionedId:"build_script/HW_compile",id:"build_script/HW_compile",title:"HW Compilation",description:"Hardware compilation is a process where we compile HDL files (In our case, we're working with System Verilog files) of our unit (In our case, we're working with minicore). During this process, we also load a file called 'instmem.sv' that was created from 'basics.c' into the instruction memory of the mini_core.",source:"@site/docs/build_script/HW_compile.md",sourceDirName:"build_script",slug:"/build_script/HW_compile",permalink:"/fpga_mafia_wiki/docs/build_script/HW_compile",draft:!1,editUrl:"https://github.com/FPGA-MAFIA/fpga_mafia_wiki/tree/main/docs/build_script/HW_compile.md",tags:[],version:"current",frontMatter:{},sidebar:"MAFIA_Build",previous:{title:"SW Compilation",permalink:"/fpga_mafia_wiki/docs/build_script/SW_compile"},next:{title:"HW elaboration and simulation",permalink:"/fpga_mafia_wiki/docs/build_script/HW_elab_simulate"}},c={},s=[{value:"Background of HW Compilation command",id:"background-of-hw-compilation-command",level:3}],p={toc:s},m="wrapper";function u(e){let{components:t,...r}=e;return(0,i.kt)(m,(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"hw-compilation"},"HW Compilation"),(0,i.kt)("p",null,"Hardware compilation is a process where we compile HDL files (In our case, we're working with System Verilog files) of our unit (In our case, we're working with mini_core). During this process, we also load a file called 'inst_mem.sv' that was created from 'basics.c' into the instruction memory of the mini_core. "),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Please type the following command in the terminal to compile the hardware part of the project:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"./build.py -dut mini_core -test basic -hw\n")),(0,i.kt)("p",null,"If you receive the message 'Test passed,' it means everything is okay. "),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Tip : We recommend you to use the whole command and always include the previous flags to do all the necessary steps from the beginning, for example:",(0,i.kt)("br",{parentName:"li"}),(0,i.kt)("inlineCode",{parentName:"li"},"./build.py -dut mini_core -test basics -app -hw")," command.  ")),(0,i.kt)("h3",{id:"background-of-hw-compilation-command"},"Background of HW Compilation command"),(0,i.kt)("p",null,"In this section, we will outline the commands that run in the background when you use the\n",(0,i.kt)("inlineCode",{parentName:"p"},"./build.py -dut mini_core -test basics -hw")," command.   "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"cd ./target/mini_core/modelsim/\n\nvlog.exe -lint -f ../../.././verif/mini_core/tb//mini_core_list.f\n\ncd C:/workspace/fpga_mafia\n")),(0,i.kt)("p",null,"Please open the ",(0,i.kt)("inlineCode",{parentName:"p"},"mini_core_list.f")," file and try to understand what it does."))}u.isMDXComponent=!0}}]);