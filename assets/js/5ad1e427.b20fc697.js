"use strict";(self.webpackChunkmy_docs=self.webpackChunkmy_docs||[]).push([[7660],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>k});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},m=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),c=s(n),u=r,k=c["".concat(p,".").concat(u)]||c[u]||d[u]||i;return n?a.createElement(k,l(l({ref:t},m),{},{components:n})):a.createElement(k,l({ref:t},m))}));function k(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=u;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o[c]="string"==typeof e?e:r,l[1]=o;for(var s=2;s<i;s++)l[s]=n[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},9167:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>d,frontMatter:()=>i,metadata:()=>o,toc:()=>s});var a=n(7462),r=(n(7294),n(3905));const i={},l="SW Compilation",o={unversionedId:"build_script/SW_compile",id:"build_script/SW_compile",title:"SW Compilation",description:"In this section we will write a basic C program and compile the software part of the project.",source:"@site/docs/build_script/SW_compile.md",sourceDirName:"build_script",slug:"/build_script/SW_compile",permalink:"/fpga_mafia_wiki/docs/build_script/SW_compile",draft:!1,editUrl:"https://github.com/FPGA-MAFIA/fpga_mafia_wiki/tree/main/docs/build_script/SW_compile.md",tags:[],version:"current",frontMatter:{},sidebar:"MAFIA_Build",previous:{title:"getting_started",permalink:"/fpga_mafia_wiki/docs/build_script/getting_started"},next:{title:"HW Compilation",permalink:"/fpga_mafia_wiki/docs/build_script/HW_compile"}},p={},s=[{value:"Background of SW Compilation command",id:"background-of-sw-compilation-command",level:3}],m={toc:s},c="wrapper";function d(e){let{components:t,...i}=e;return(0,r.kt)(c,(0,a.Z)({},m,i,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"sw-compilation"},"SW Compilation"),(0,r.kt)("p",null,"In this section we will write a basic C program and compile the software part of the project. "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Go to ",(0,r.kt)("inlineCode",{parentName:"li"},"verif/mini_core/tests")," and create file named ",(0,r.kt)("inlineCode",{parentName:"li"},"basics.c")," with the following content:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"int main(){\n    int x = 1;\n    int y = 2;\n\n    int z = x + y;\n\n    return 0;\n}\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Type the following command in the terminal to compile the C program we just wrote:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"./build.py -dut mini_core -test basics -app\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Go to ",(0,r.kt)("inlineCode",{parentName:"li"},"target/mini_core/tests/basics")," and observe the content of the folder. You should see the following files:   ")),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"basics_sw_compile.png",src:n(520).Z,width:"193",height:"603"})),(0,r.kt)("p",null,"WOW we got all the files we need to run the HW simulation. Let's try to understand what each file is doing: (those are the most important files)"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"basics_rv32i.c.s")," - This is an assembly file that was generated by the compiler. This file contains the assembly code of the C program we wrote.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"basics_rv32i.elf")," - This is an ELF file that was generated by the compiler. This file contains the machine code of the C program we wrote. This file is not readable by humans so we wont use it at this point.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"basics_rv32i_elf.txe")," - This is the converted version of the ELF file written in assembly code. This file is readable and we will use it allot while running and debugging the HW simulation.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"inst_mem.sv")," - This is the instruction memory file that contains the machine code of the C program we wrote suitable for",(0,r.kt)("br",{parentName:"p"}),"\n","RISC-V ISA. "))),(0,r.kt)("p",null,"Hey, doesn't this seem like something we've seen before? Yes, you're correct. We did something similar when we were compiling a C program in the ",(0,r.kt)("a",{parentName:"p",href:"/fpga_mafia_wiki/docs/TFM/projectTool/GccRiscV"},"RISC-V GCC")," section in TFM. But now, the difference is that we're connecting everything to the MAFIA environment and doing it in a more automated way."),(0,r.kt)("p",null," note: Please download the ",(0,r.kt)("a",{parentName:"p",href:"https://riscv.org/wp-content/uploads/2017/05/riscv-spec-v2.2.pdf"},"riscv-spec")," cause you will need it in the future.\nPlease make sure you understand ",(0,r.kt)("inlineCode",{parentName:"p"},"RV32I Base Instruction Set")," as shown in chapter 19 and ",(0,r.kt)("inlineCode",{parentName:"p"},"RISC-V Assembly Programmer\u2019s Handbook")," as shown in chapter 20 cause we will use the following table in the future:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Register"),(0,r.kt)("th",{parentName:"tr",align:null},"ABI name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"x0"),(0,r.kt)("td",{parentName:"tr",align:null},"zero"),(0,r.kt)("td",{parentName:"tr",align:null},"Hard-wired zero")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"x1"),(0,r.kt)("td",{parentName:"tr",align:null},"ra"),(0,r.kt)("td",{parentName:"tr",align:null},"Return address")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"x2"),(0,r.kt)("td",{parentName:"tr",align:null},"sp"),(0,r.kt)("td",{parentName:"tr",align:null},"Stack pointer")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"x3"),(0,r.kt)("td",{parentName:"tr",align:null},"gp"),(0,r.kt)("td",{parentName:"tr",align:null},"Global pointer")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"x4"),(0,r.kt)("td",{parentName:"tr",align:null},"tp"),(0,r.kt)("td",{parentName:"tr",align:null},"Thread pointer")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"x5"),(0,r.kt)("td",{parentName:"tr",align:null},"t0"),(0,r.kt)("td",{parentName:"tr",align:null},"Temporary/alternate link register")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"x6-7"),(0,r.kt)("td",{parentName:"tr",align:null},"t1-2"),(0,r.kt)("td",{parentName:"tr",align:null},"Temporaries")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"x8"),(0,r.kt)("td",{parentName:"tr",align:null},"s0"),(0,r.kt)("td",{parentName:"tr",align:null},"Saved register")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"x9"),(0,r.kt)("td",{parentName:"tr",align:null},"s1"),(0,r.kt)("td",{parentName:"tr",align:null},"Saved register")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"x10-11"),(0,r.kt)("td",{parentName:"tr",align:null},"a0-1"),(0,r.kt)("td",{parentName:"tr",align:null},"Function arguments/return values")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"x12-17"),(0,r.kt)("td",{parentName:"tr",align:null},"a2-7"),(0,r.kt)("td",{parentName:"tr",align:null},"Function arguments")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"x18-27"),(0,r.kt)("td",{parentName:"tr",align:null},"s2-s11"),(0,r.kt)("td",{parentName:"tr",align:null},"Saved registers")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"x28-31"),(0,r.kt)("td",{parentName:"tr",align:null},"t3-6"),(0,r.kt)("td",{parentName:"tr",align:null},"Temporaries")))),(0,r.kt)("h3",{id:"background-of-sw-compilation-command"},"Background of SW Compilation command"),(0,r.kt)("p",null,"In this section, we will outline the commands that run in the background when you use the",(0,r.kt)("br",{parentName:"p"}),"\n","",(0,r.kt)("inlineCode",{parentName:"p"},"./build.py -dut mini_core -test basics -app")," command.   "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"mkdir ./target/mini_core/tests/basics\n\nmkdir ./target/mini_core/tests/basics/gcc_files\n\ncd ./target/mini_core/tests/basics/gcc_files\n\nriscv-none-embed-gcc.exe -S -ffreestanding -march=rv32i -I ../../../../../app/defines ../../../../.././verif/mini_core/tests/basics.c -o basics_rv32i.c.s\n\nriscv-none-embed-gcc.exe -O3 -march=rv32i -T ../../../../../app/link.common.ld -I ../../../../../app/defines -Wl,--defsym=I_MEM_OFFSET=0 -Wl,--defsym=I_MEM_LENGTH=65536 -Wl,--defsym=D_MEM_OFFSET=65536 -Wl,--defsym=D_MEM_LENGTH=61440 -nostartfiles -D__riscv__ -Wl,-Map=basics.map ../../../../../app/crt0_default.S basics_rv32i.c.s -o basics_rv32i.elf\n\nriscv-none-embed-objdump.exe -gd basics_rv32i.elf > basics_rv32i_elf.txt\n\nriscv-none-embed-objcopy.exe --srec-len 1 --output-target=verilog basics_rv32i.elf inst_mem.sv\n\ncd C:/workspace/fpga_mafia\n\n")))}d.isMDXComponent=!0},520:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/basics_sw_compile-b497a72ada1bfa3b45a5e9f7e715349d.png"}}]);