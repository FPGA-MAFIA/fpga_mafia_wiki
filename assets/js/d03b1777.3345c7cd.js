"use strict";(self.webpackChunkmy_docs=self.webpackChunkmy_docs||[]).push([[2611],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=r.createContext({}),s=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=s(n),d=o,f=m["".concat(p,".").concat(d)]||m[d]||u[d]||i;return n?r.createElement(f,a(a({ref:t},c),{},{components:n})):r.createElement(f,a({ref:t},c))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=d;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[m]="string"==typeof e?e:o,a[1]=l;for(var s=2;s<i;s++)a[s]=n[s];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},4785:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var r=n(7462),o=(n(7294),n(3905));const i={},a=void 0,l={unversionedId:"TFM/projectTool/hw_compile",id:"TFM/projectTool/hw_compile",title:"hw_compile",description:"Compilation",source:"@site/docs/TFM/projectTool/hw_compile.md",sourceDirName:"TFM/projectTool",slug:"/TFM/projectTool/hw_compile",permalink:"/fpga_mafia_wiki/docs/TFM/projectTool/hw_compile",draft:!1,editUrl:"https://github.com/FPGA-MAFIA/fpga_mafia_wiki/tree/main/docs/TFM/projectTool/hw_compile.md",tags:[],version:"current",frontMatter:{},sidebar:"TFM",previous:{title:"modelsim_intro",permalink:"/fpga_mafia_wiki/docs/TFM/projectTool/modelsim_intro"},next:{title:"hw_elab",permalink:"/fpga_mafia_wiki/docs/TFM/projectTool/hw_elab"}},p={},s=[{value:"Compilation",id:"compilation",level:3},{value:"troubleshooting",id:"troubleshooting",level:3}],c={toc:s},m="wrapper";function u(e){let{components:t,...n}=e;return(0,o.kt)(m,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h3",{id:"compilation"},"Compilation"),(0,o.kt)("p",null,"In simple terms, compilation is a process that looks for errors in your code. These errors can be related to syntax or hardware issues, broadly speaking.",(0,o.kt)("br",{parentName:"p"}),"\n","In that part, we'll go through all the basic steps needed for writing system Verilog, fixing any issues, and observing the outcomes in simulation."),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"write a simple systemverilog module: ",(0,o.kt)("inlineCode",{parentName:"li"},"test.sv")," ",(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre"},"module test (\n    input  logic in_0,\n    input  logic in_1,\n    output logic out\n);\nassign out = in_0 & in_1;\nendmodule\n"))),(0,o.kt)("li",{parentName:"ol"},"write a simple systemverilog test bench module: ",(0,o.kt)("inlineCode",{parentName:"li"},"test_tb.sv"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre"},'module test_tb ();\nlogic in_0;\nlogic in_1;\nlogic  out;\ninitial begin : assign_input\n    in_0 = 1\'b0;\n    in_1 = 1\'b0; // 0&0\n#4 $display("out = in_0 & in_1:\\n    > %b = %b & %b",out ,in_0, in_1);\n#4 in_1 = 1\'b1; // 0&1\n#4 $display("out = in_0 & in_1:\\n    > %b = %b & %b",out ,in_0, in_1);\n#4 in_0 = 1\'b1; // 1&1\n#4 $display("out = in_0 & in_1:\\n    > %b = %b & %b",out ,in_0, in_1);\n#4 $finish;\nend// initial\ntest test_and (\n    .in_0(in_0),\n    .in_1(in_1),\n    .out(out)\n);\nendmodule // test_tb\n'))),(0,o.kt)("li",{parentName:"ol"},"List the files & include dirs for model: ",(0,o.kt)("inlineCode",{parentName:"li"},"test_list.f"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre"},"touch test_list.f\ncode test_list.f\n")),"Insert file names into ",(0,o.kt)("inlineCode",{parentName:"li"},"test_list.f")," file",(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre"},"test.sv\ntest_tb.sv\n"))),(0,o.kt)("li",{parentName:"ol"},"Make directory called ",(0,o.kt)("inlineCode",{parentName:"li"},'"work"'),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre"},"mkdir work\n"))),(0,o.kt)("li",{parentName:"ol"},"Compile systemverilog using the following command.",(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre"},"vlog.exe -f test_list.f\n")))),(0,o.kt)("p",null,"If everything is fine, you should receive a message saying that there are no errors."),(0,o.kt)("h3",{id:"troubleshooting"},"troubleshooting"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Your PATH might contain Hebrew letters or a mix of characters. "),(0,o.kt)("li",{parentName:"ul"},"Please run compile command outside ",(0,o.kt)("inlineCode",{parentName:"li"},"WORK")," folder")))}u.isMDXComponent=!0}}]);