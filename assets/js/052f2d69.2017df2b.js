"use strict";(self.webpackChunkmy_docs=self.webpackChunkmy_docs||[]).push([[5784],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>d});var a=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function c(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?c(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):c(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},c=Object.keys(e);for(a=0;a<c.length;a++)r=c[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(a=0;a<c.length;a++)r=c[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var l=a.createContext({}),p=function(e){var t=a.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},s="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},f=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,c=e.originalType,l=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),s=p(r),f=n,d=s["".concat(l,".").concat(f)]||s[f]||m[f]||c;return r?a.createElement(d,i(i({ref:t},u),{},{components:r})):a.createElement(d,i({ref:t},u))}));function d(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var c=r.length,i=new Array(c);i[0]=f;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[s]="string"==typeof e?e:n,i[1]=o;for(var p=2;p<c;p++)i[p]=r[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,r)}f.displayName="MDXCreateElement"},5799:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>m,frontMatter:()=>c,metadata:()=>o,toc:()=>p});var a=r(7462),n=(r(7294),r(3905));const c={},i="Data Cache - MAS",o={unversionedId:"cache/MAS/d_cache",id:"cache/MAS/d_cache",title:"Data Cache - MAS",description:"The data cache Micro-Architecture-Specification",source:"@site/docs/cache/MAS/d_cache.md",sourceDirName:"cache/MAS",slug:"/cache/MAS/d_cache",permalink:"/fpga_mafia_wiki/docs/cache/MAS/d_cache",draft:!1,editUrl:"https://github.com/FPGA-MAFIA/fpga_mafia_wiki/tree/main/docs/cache/MAS/d_cache.md",tags:[],version:"current",frontMatter:{},sidebar:"Cache",previous:{title:"This is the Cache Micro-Architecture-Specification",permalink:"/fpga_mafia_wiki/docs/cache/MAS/MAS_intro"},next:{title:"Pipe",permalink:"/fpga_mafia_wiki/docs/cache/MAS/pipe"}},l={},p=[{value:"Block Diagram",id:"block-diagram",level:2},{value:"Top level interface",id:"top-level-interface",level:2},{value:"main components:",id:"main-components",level:2},{value:"TQ",id:"tq",level:3},{value:"TQ flows",id:"tq-flows",level:4},{value:"pipe_wrap",id:"pipe_wrap",level:3}],u={toc:p},s="wrapper";function m(e){let{components:t,...r}=e;return(0,n.kt)(s,(0,a.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"data-cache---mas"},"Data Cache - MAS"),(0,n.kt)("p",null,"The data cache Micro-Architecture-Specification "),(0,n.kt)("h2",{id:"block-diagram"},"Block Diagram"),(0,n.kt)("p",null,"TODO - insert the block diagram"),(0,n.kt)("h2",{id:"top-level-interface"},"Top level interface"),(0,n.kt)("h2",{id:"main-components"},"main components:"),(0,n.kt)("h3",{id:"tq"},"TQ"),(0,n.kt)("h4",{id:"tq-flows"},"TQ flows"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Core request -> allocate tq entry")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Lookup:")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Lookup responce -> update TQ entry"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Hit:")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Miss:"))))),(0,n.kt)("h3",{id:"pipe_wrap"},"pipe_wrap"),(0,n.kt)("h4",{id:""}),(0,n.kt)("p",null,"HAS - super minimaly\nMAS - all the blocks, tq blocks, tq entry blocks, pipe_wrap, pipe, d_cache,\nVerification\n-refModel: on what we are doing monitoring\n-Dedicated test: list of test we did, to check what, (specific features, same CL, diff CL)\n-Checkers: compare our DUT to refModel, PostProcess\n-Trackers: what trackers we have on pipe, on TQ"),(0,n.kt)("p",null,"mux to pipe, who can go through "),(0,n.kt)("p",null,"interface, pic"))}m.isMDXComponent=!0}}]);