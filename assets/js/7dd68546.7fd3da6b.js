"use strict";(self.webpackChunkmy_docs=self.webpackChunkmy_docs||[]).push([[4106],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=o.createContext({}),u=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=u(e.components);return o.createElement(l.Provider,{value:t},e.children)},p="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=u(n),d=r,m=p["".concat(l,".").concat(d)]||p[d]||h[d]||i;return n?o.createElement(m,a(a({ref:t},c),{},{components:n})):o.createElement(m,a({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,a=new Array(i);a[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[p]="string"==typeof e?e:r,a[1]=s;for(var u=2;u<i;u++)a[u]=n[u];return o.createElement.apply(null,a)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},2358:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>i,metadata:()=>s,toc:()=>u});var o=n(7462),r=(n(7294),n(3905));const i={},a="Github actions",s={unversionedId:"TFM/projectTool/GitHubActions",id:"TFM/projectTool/GitHubActions",title:"Github actions",description:"Overview of Actions and Workflows",source:"@site/docs/TFM/projectTool/GitHubActions.md",sourceDirName:"TFM/projectTool",slug:"/TFM/projectTool/GitHubActions",permalink:"/fpga_mafia_wiki/docs/TFM/projectTool/GitHubActions",draft:!1,editUrl:"https://github.com/FPGA-MAFIA/fpga_mafia_wiki/tree/main/docs/TFM/projectTool/GitHubActions.md",tags:[],version:"current",frontMatter:{},sidebar:"TFM",previous:{title:"git_cheat_sheet",permalink:"/fpga_mafia_wiki/docs/TFM/projectTool/git_cheat_sheet"},next:{title:"git_hub_projects",permalink:"/fpga_mafia_wiki/docs/TFM/projectTool/git_hub_projects"}},l={},u=[{value:"Overview of Actions and Workflows",id:"overview-of-actions-and-workflows",level:2},{value:"Setting up Actions and Workflows",id:"setting-up-actions-and-workflows",level:2},{value:"Running the Project Build and Tests",id:"running-the-project-build-and-tests",level:2}],c={toc:u},p="wrapper";function h(e){let{components:t,...n}=e;return(0,r.kt)(p,(0,o.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"github-actions"},"Github actions"),(0,r.kt)("h2",{id:"overview-of-actions-and-workflows"},"Overview of Actions and Workflows"),(0,r.kt)("p",null,"GitHub Actions is a flexible, powerful platform for automating software development workflows.",(0,r.kt)("br",{parentName:"p"}),"\n","With GitHub Actions, we can define custom workflows that run automated tasks whenever specific events occur in your repository.",(0,r.kt)("br",{parentName:"p"}),"\n","Workflows are defined in a YAML file and can be triggered by a variety of events, such as pushes to a branch, pull requests, or issue comments."),(0,r.kt)("p",null,"We have set up a custom workflow in our project using GitHub Actions to automate the build and test process.",(0,r.kt)("br",{parentName:"p"}),"\n","Whenever a new Pull request is issued or a Push to the main repository branch.\nThe workflow runs a series of steps, which currently simply runs the build per DUT:  "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Compile the C Sofware (GCC, link, generate inst/data sv files)   "),(0,r.kt)("li",{parentName:"ul"},"Compile the Verilog code  "),(0,r.kt)("li",{parentName:"ul"},"Run the tests, and report the results",(0,r.kt)("br",{parentName:"li"}),"We have configured the workflow to run on a local host to ensure that the environment is consistent and can be easily reproduced.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"}," The benefits of using GitHub Actions for our project include: ")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Automated testing: By automating the build and test process, we can catch issues earlier and reduce the risk of introducing bugs."),(0,r.kt)("li",{parentName:"ul"},"Consistent environment: Running the workflow on a local host ensures that the environment is consistent and can be easily reproduced, making it easier for other contributors to get up and running quickly."),(0,r.kt)("li",{parentName:"ul"},"Customization: GitHub Actions allows us to define customized workflows that meet our specific needs and integrate with other tools and services we use in our project.  ")),(0,r.kt)("p",null,"In the following sections, we'll provide more details on how we set up and configured the workflow for our project.  "),(0,r.kt)("h2",{id:"setting-up-actions-and-workflows"},"Setting up Actions and Workflows"),(0,r.kt)("p",null,"To set up the workflow for our Verilog project, we followed these steps:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Create a .github/workflows directory in the root of the repository."),(0,r.kt)("li",{parentName:"ol"},"Create a YAML file in the .github/workflows directory. We named ours build-test.yml, but you can use any name you like, as long as it ends in .yml."),(0,r.kt)("li",{parentName:"ol"},"Define the events that should trigger the workflow. For our project, we chose to trigger the workflow on push events to the main branch:"),(0,r.kt)("li",{parentName:"ol"},"Define the steps of the workflow. In our case, we have three steps: checkout, build, and test. Here's the complete YAML file:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"# this is a github action that runs the python build\n\nname: mafia_sanity\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n  workflow_dispatch:\n\njobs:\n  build:\n    runs-on: [self-hosted , windows, x64]\n    steps:\n      - uses: actions/checkout@v2\n      - name: Run build BIG_CORE -all -app -hw -sim\n        run: python build.py -proj_name 'big_core' -debug -all -app -hw -sim\n      - name: Run build MINI_CORE -all -app -hw -sim\n        run: python build.py -proj_name 'mini_core' -debug -all -app -hw -sim\n      - name: Run build SC_CORE -all -app -hw -sim \n        run: python build.py -proj_name 'sc_core' -debug -all -app -hw -sim\n      - name: Run build CACHE -all -app -hw -sim \n        run: python build.py -proj_name 'cache' -debug -all -hw -sim\n")),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Let's break down the important parts of this YAML file:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("inlineCode",{parentName:"li"},"name")," field provides a descriptive name for the workflow. This is displayed in the Actions tab of the repository."),(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("inlineCode",{parentName:"li"},"on")," field defines the events that should trigger the workflow. In our case, we're triggering the workflow on push events to the main branch."),(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("inlineCode",{parentName:"li"},"jobs")," field defines the jobs that make up the workflow. We have one job, called build-test, that runs on an ubuntu-latest virtual environment."),(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("inlineCode",{parentName:"li"},"steps")," field defines the steps that make up the build-test job. We have three steps: checkout, build, and test."),(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("inlineCode",{parentName:"li"},"uses")," field in the checkout step specifies that we're using the actions/checkout action to check out the code from the repository."),(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("inlineCode",{parentName:"li"},"run")," field in the build and test steps specifies the commands that should be run to build and test the code.")),(0,r.kt)("h2",{id:"running-the-project-build-and-tests"},"Running the Project Build and Tests"),(0,r.kt)("p",null,"To run the build and tests for your project, trigger the event specified in your workflow YAML file.",(0,r.kt)("br",{parentName:"p"}),"\n","This is done by a Pull-Request or manually on your branch in the action tab.\nGitHub Actions will create a virtual environment and run the steps you defined."),(0,r.kt)("p",null,"Our workflow checks out the code, builds it, and runs the tests.",(0,r.kt)("br",{parentName:"p"}),"\n","If any step fails, the job will fail.",(0,r.kt)("br",{parentName:"p"}),"\n",'You can see the build and test results in your repository\'s "Actions" tab.  '),(0,r.kt)("p",null,"GitHub Actions makes it easy to reproduce the build and tests on different environments, catch issues early, and get feedback on the results directly in the GitHub UI.  "),(0,r.kt)("hr",null),(0,r.kt)("h1",{id:""}),(0,r.kt)("p",null,"setting your personal PC as a server to run sanity action - gate keeper for Submit"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"cd ~/../.."),(0,r.kt)("li",{parentName:"ol"},"mkdir actions-runner"),(0,r.kt)("li",{parentName:"ol"},"cd actions-runner"),(0,r.kt)("li",{parentName:"ol"},"curl -o actions-runner-win-x64-2.301.1.zip -L ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/actions/runner/releases/download/v2.301.1/actions-runner-win-x64-2.301.1.zip"},"https://github.com/actions/runner/releases/download/v2.301.1/actions-runner-win-x64-2.301.1.zip")),(0,r.kt)("li",{parentName:"ol"},"if ",'[ "$(shasum -a 256 actions-runner-win-x64-2.301.1.zip | awk \'{print $1}\')" != "e83b27af969cb074ca53629b340f38d20e528071f4d6f9d4ba7819dace689ece" ]',"; then throw 'Computed checksum did not match'; fi"),(0,r.kt)("li",{parentName:"ol"},"./config.cmd --url ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/amichai-bd/fpga_mafia"},"https://github.com/amichai-bd/fpga_mafia")," --token ATKK63ZZDRXTGTP3DHJQ233D5NQJI",(0,r.kt)("ol",{parentName:"li"},(0,r.kt)("li",{parentName:"ol"},"Would you like to run the runner as service? (Y/N) ","[press Enter for N]",' N  /Press "N"'))),(0,r.kt)("li",{parentName:"ol"},"./run.cmd")),(0,r.kt)("p",null,"still WIP to get this to run on pull request & push"))}h.isMDXComponent=!0}}]);