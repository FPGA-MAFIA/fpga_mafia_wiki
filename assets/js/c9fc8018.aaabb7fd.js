"use strict";(self.webpackChunkmy_docs=self.webpackChunkmy_docs||[]).push([[3927],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>g});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),u=p(n),d=a,g=u["".concat(s,".").concat(d)]||u[d]||m[d]||l;return n?r.createElement(g,i(i({ref:t},c),{},{components:n})):r.createElement(g,i({ref:t},c))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,i=new Array(l);i[0]=d;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[u]="string"==typeof e?e:a,i[1]=o;for(var p=2;p<l;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},4629:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>l,metadata:()=>o,toc:()=>p});var r=n(7462),a=(n(7294),n(3905));const l={},i="Coding Style",o={unversionedId:"TFM/verilog/coding_style",id:"TFM/verilog/coding_style",title:"Coding Style",description:"Signal declaration",source:"@site/docs/TFM/verilog/coding_style.md",sourceDirName:"TFM/verilog",slug:"/TFM/verilog/coding_style",permalink:"/fpga_mafia_wiki/docs/TFM/verilog/coding_style",draft:!1,editUrl:"https://github.com/FPGA-MAFIA/fpga_mafia_wiki/tree/main/docs/TFM/verilog/coding_style.md",tags:[],version:"current",frontMatter:{},sidebar:"TFM",previous:{title:"Multiple dimensional arrays",permalink:"/fpga_mafia_wiki/docs/TFM/verilog/multi_dim_array"},next:{title:"pre-compiler include , define & macros",permalink:"/fpga_mafia_wiki/docs/TFM/verilog/pre_compile"}},s={},p=[{value:"Signal declaration",id:"signal-declaration",level:2},{value:"Naming convention",id:"naming-convention",level:2}],c={toc:p},u="wrapper";function m(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"coding-style"},"Coding Style"),(0,a.kt)("h2",{id:"signal-declaration"},"Signal declaration"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"implicit declaration & declaration type\nIn SystemVerilog declaring types are optional, but it is recommended to use them for better readability.\nIf you do not explicitly declare a signal type, the default type is a single bit ",(0,a.kt)("inlineCode",{parentName:"li"},"logic"),".")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Module IO")),(0,a.kt)("h2",{id:"naming-convention"},"Naming convention"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Module:"),(0,a.kt)("br",{parentName:"li"}),"lower case, and use underscores to separate words.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-systemverilog"},"  module my_module ( \n    input logic Clock,\n    input logic Reset,\n    ...\n    );\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"signal:"),(0,a.kt)("br",{parentName:"li"}),"Option 1: lower case, and use underscores to separate words")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-systemverilog"},"    logic [1:0] my_signal,\n")),(0,a.kt)("p",null,"Option 2: CamelCase, may use underscore for specific cases"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-systemverilog"},"    logic [1:0] MySignal,\n    logic [1:0] A2F_MySignal,\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"instance:"),(0,a.kt)("br",{parentName:"li"}),"lower case, and use underscores to separate words")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-systemverilog"},"    my_module my_module_inst (\n      .Clock(Clock),\n      .Reset(Reset),\n      ...\n    );\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"parameters:"),(0,a.kt)("br",{parentName:"li"}),"HIGH CASE, and use underscores to separate words")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-systemverilog"},"    parameter MY_PARAM = 10;\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"typedef:"),(0,a.kt)("br",{parentName:"li"}),'lower case, prefix "t_", and use underscores to separate words')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-systemverilog"},"    typedef logic [1:0] t_my_typedef;\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Pipe staging:"),(0,a.kt)("br",{parentName:"li"}),'Option 1: lower case, suffix underscore "_<pipe_letter><pipe_number>" example: singal_q1, signal_q2,')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-systemverilog"},"    `DFF(signal_q2, signal_q1, clk)\n")),(0,a.kt)("p",null,"Option 2: CamelCase, Suffixed PipeLetter and PipeNumber, example: SignalQ1, SignalQ2"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-systemverilog"},"    `DFF(SignalQ2, SignalQ1 , Clk)\n")))}m.isMDXComponent=!0}}]);