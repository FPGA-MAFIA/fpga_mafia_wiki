"use strict";(self.webpackChunkmy_docs=self.webpackChunkmy_docs||[]).push([[1274],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>f});var i=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},o=Object.keys(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=i.createContext({}),_=function(e){var t=i.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},u=function(e){var t=_(e.components);return i.createElement(l.Provider,{value:t},e.children)},s="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},m=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,u=a(e,["components","mdxType","originalType","parentName"]),s=_(n),m=r,f=s["".concat(l,".").concat(m)]||s[m]||p[m]||o;return n?i.createElement(f,c(c({ref:t},u),{},{components:n})):i.createElement(f,c({ref:t},u))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,c=new Array(o);c[0]=m;var a={};for(var l in t)hasOwnProperty.call(t,l)&&(a[l]=t[l]);a.originalType=e,a[s]="string"==typeof e?e:r,c[1]=a;for(var _=2;_<o;_++)c[_]=n[_];return i.createElement.apply(null,c)}return i.createElement.apply(null,n)}m.displayName="MDXCreateElement"},7712:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>c,default:()=>p,frontMatter:()=>o,metadata:()=>a,toc:()=>_});var i=n(7462),r=(n(7294),n(3905));const o={},c="if",a={unversionedId:"rvc/common/if",id:"rvc/common/if",title:"if",description:"Instruction fetch",source:"@site/docs/rvc/common/if.md",sourceDirName:"rvc/common",slug:"/rvc/common/if",permalink:"/fpga_mafia_wiki/docs/rvc/common/if",draft:!1,editUrl:"https://github.com/FPGA-MAFIA/fpga_mafia_wiki/tree/main/docs/rvc/common/if.md",tags:[],version:"current",frontMatter:{},sidebar:"RISCV_Cores",previous:{title:"The Mini Core",permalink:"/fpga_mafia_wiki/docs/rvc/common/intro"},next:{title:"decode",permalink:"/fpga_mafia_wiki/docs/rvc/common/decode"}},l={},_=[{value:"Instruction fetch",id:"instruction-fetch",level:2},{value:"instantiation of fetch module in mini_core.sv",id:"instantiation-of-fetch-module-in-mini_coresv",level:3},{value:"Signal description",id:"signal-description",level:3},{value:"Fetch module mini_core_if.sv",id:"fetch-module-mini_core_ifsv",level:3},{value:"mini_core_if module abstract diagram",id:"mini_core_if-module-abstract-diagram",level:3}],u={toc:_},s="wrapper";function p(e){let{components:t,...o}=e;return(0,r.kt)(s,(0,i.Z)({},u,o,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"if"},"if"),(0,r.kt)("h2",{id:"instruction-fetch"},"Instruction fetch"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The instruction fetch unit is responsible for fetching instructions from the Instruction memory."),(0,r.kt)("li",{parentName:"ul"},"The first stage of the pipeline in our coding style named as ",(0,r.kt)("inlineCode",{parentName:"li"},"CYCLE Q100H"))),(0,r.kt)("h3",{id:"instantiation-of-fetch-module-in-mini_coresv"},"instantiation of fetch module in mini_core.sv"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"//////////////////////////////////////////////////////////////////////////////////////////////////\n//   _____  __     __   _____   _        ______          ____    __    ___     ___    _    _ \n//  / ____| \\ \\   / /  / ____| | |      |  ____|        / __ \\  /_ |  / _ \\   / _ \\  | |  | |\n// | |       \\ \\_/ /  | |      | |      | |__          | |  | |  | | | | | | | | | | | |__| |\n// | |        \\   /   | |      | |      |  __|         | |  | |  | | | | | | | | | | |  __  |\n// | |____     | |    | |____  | |____  | |____        | |__| |  | | | |_| | | |_| | | |  | |\n//  \\_____|    |_|     \\_____| |______| |______|        \\___\\_\\  |_|  \\___/   \\___/  |_|  |_|\n//\n//////////////////////////////////////////////////////////////////////////////////////////////////\n// Instruction fetch\n// -----------------\n// 1. Send the PC (program counter) to the I_MEM\n// 2. Calc/Set the NextPc\n// -----------------\n//////////////////////////////////////////////////////////////////////////////////////////////////\nmini_core_if mini_core_if (\n  .Clock        (Clock       ), // input  logic        Clock,\n  .Rst          (Rst         ), // input  logic        Rst,\n  .ReadyQ100H   (ReadyQ100H  ), // input  logic        ReadyQ100H,\n  .ReadyQ101H   (ReadyQ101H  ), // input  logic        ReadyQ101H,\n  .Ctrl         (CtrlIf        ), // input  t_ctrl_if    Ctrl,\n  .AluOutQ102H  (AluOutQ102H ), // input  logic [31:0] AluOutQ102H,\n  .PcQ100H      (PcQ100H     ), // output logic [31:0] PcQ100H,\n  .PcQ101H      (PcQ101H     ) // output logic [31:0] PcQ101H\n);\n")),(0,r.kt)("h3",{id:"signal-description"},"Signal description"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Clock: Clock signal. That signal is a part of mini_core inputs. and declare as :",(0,r.kt)("inlineCode",{parentName:"li"},"input  logic  Clock")),(0,r.kt)("li",{parentName:"ul"},"Rst: Reset signal. That signal is a part of mini_core inputs. and declare as :",(0,r.kt)("inlineCode",{parentName:"li"},"input  logic  Rst")),(0,r.kt)("li",{parentName:"ul"},"ReadyQ100H: its the enable signal of Pc register."),(0,r.kt)("li",{parentName:"ul"},"ReadyQ101H: its the enable signal of IF/ID register."),(0,r.kt)("li",{parentName:"ul"},"CtrlIf: This is a part of ",(0,r.kt)("inlineCode",{parentName:"li"},"typedef struct packed")," (see mini_core_pkg.vh file) variable. Its connected to the mux ctrl input (as seen in the sketch below) to determine the next PC. "),(0,r.kt)("li",{parentName:"ul"},"AluOutQ102H: its the output of ALU from ",(0,r.kt)("inlineCode",{parentName:"li"},"Q102H")," execution stage and determine the next PC in case of ",(0,r.kt)("inlineCode",{parentName:"li"},"JAL, JALR, BRANCH")," instructions."),(0,r.kt)("li",{parentName:"ul"},"PcQ100H: its the output of Pc register."),(0,r.kt)("li",{parentName:"ul"},"PcQ101H: its the input of IF/ID register.")),(0,r.kt)("h3",{id:"fetch-module-mini_core_ifsv"},"Fetch module mini_core_if.sv"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'`include "macros.sv"\n\nmodule mini_core_if \nimport common_pkg::*;\n(\n    input  logic        Clock,\n    input  logic        Rst,\n    input  var t_ctrl_if    Ctrl,\n    input  logic        ReadyQ100H,\n    input  logic        ReadyQ101H,\n    input  logic [31:0] AluOutQ102H,\n    output logic [31:0] PcQ100H,\n    output logic [31:0] PcQ101H\n);\n\nlogic [31:0] PcPlus4Q100H;\nlogic [31:0] NextPcQnnnH;\nassign PcPlus4Q100H = PcQ100H + 3\'h4;\nassign NextPcQnnnH  = Ctrl.SelNextPcAluOutQ102H ? AluOutQ102H : PcPlus4Q100H;\n`MAFIA_EN_RST_DFF(PcQ100H, NextPcQnnnH, Clock, ReadyQ100H, Rst)\n\n// Q100H to Q101H Flip Flops. \n`MAFIA_EN_DFF(PcQ101H, PcQ100H, Clock, ReadyQ101H)\n\nendmodule\n')),(0,r.kt)("h3",{id:"mini_core_if-module-abstract-diagram"},"mini_core_if module abstract diagram"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"------------------------------------------------------------------------------------------------------------------------")),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"if_fetch",src:n(8035).Z,width:"819",height:"511"})),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"------------------------------------------------------------------------------------------------------------------------")))}p.isMDXComponent=!0},8035:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/images/if_fetch-b3c1f6f630dcc7fa58bc43e6ffedeac7.jpg"}}]);