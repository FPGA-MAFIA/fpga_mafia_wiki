"use strict";(self.webpackChunkmy_docs=self.webpackChunkmy_docs||[]).push([[6747],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>d});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function c(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=n.createContext({}),s=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},p=function(e){var t=s(e.components);return n.createElement(l.Provider,{value:t},e.children)},u="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),u=s(a),m=r,d=u["".concat(l,".").concat(m)]||u[m]||h[m]||i;return a?n.createElement(d,o(o({ref:t},p),{},{components:a})):n.createElement(d,o({ref:t},p))}));function d(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,o=new Array(i);o[0]=m;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c[u]="string"==typeof e?e:r,o[1]=c;for(var s=2;s<i;s++)o[s]=a[s];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},7167:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>c,toc:()=>s});var n=a(7462),r=(a(7294),a(3905));const i={},o="5. High Level Block Description",c={unversionedId:"cache/High_level_block_description",id:"cache/High_level_block_description",title:"5. High Level Block Description",description:"5.1 Transaction Queue (TQ)",source:"@site/docs/cache/High_level_block_description.md",sourceDirName:"cache",slug:"/cache/High_level_block_description",permalink:"/fpga_mafia_doc/docs/cache/High_level_block_description",draft:!1,editUrl:"https://github.com/noamsabb/fpga_mafia_doc/tree/main/docs/cache/High_level_block_description.md",tags:[],version:"current",frontMatter:{},sidebar:"Cache",previous:{title:"Overview",permalink:"/fpga_mafia_doc/docs/cache/cache_overview"},next:{title:'<a name="_toc1967356741"></a><a name="_toc1779312326"></a>**6. High level Transaction Flows**',permalink:"/fpga_mafia_doc/docs/cache/High_level_Transaction_Flows"}},l={},s=[{value:'<a name="_toc157919810"></a><a name="_toc216915204"></a><strong>5.1 Transaction Queue (TQ)</strong>',id:"51-transaction-queue-tq",level:2},{value:'<a name="_toc362446169"></a><a name="_toc1128226896"></a><strong>5.2 Pipe</strong>',id:"52-pipe",level:2},{value:'<a name="_toc2002927206"></a><a name="_toc768632131"></a><strong>5.3 Tag Array</strong>',id:"53-tag-array",level:2},{value:'<a name="_toc1970387951"></a><a name="_toc248060331"></a><strong>5.4 Data Cache Array</strong>',id:"54-data-cache-array",level:2}],p={toc:s},u="wrapper";function h(e){let{components:t,...a}=e;return(0,r.kt)(u,(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"5-high-level-block-description"},"5. High Level Block Description"),(0,r.kt)("h2",{id:"51-transaction-queue-tq"},(0,r.kt)("a",{name:"_toc157919810"}),(0,r.kt)("a",{name:"_toc216915204"}),(0,r.kt)("strong",{parentName:"h2"},"5.1 Transaction Queue (TQ)")),(0,r.kt)("p",null,"The transaction Queue has <NUM","_","TQ","_","ENTRY> entries.\nEach entry has Buffer & FSM (Finite State Machine).\nBuffer - Holds the Data, Address, req","_","id of each request.\nFSM \t- will manage the requests life cycle.\nCommon Finite State Machine Flow:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Write Hit:"),"          S","_","IDLE -> S","_","LU","_","CORE->S","_"," IDLE"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Write Miss:"),"       S","_","IDLE -> S","_","LU","_","CORE->S","_","MB","_","WAIT","_","FILL -> S","_","MB","_","FILL","_","READY -> S","_"," IDLE"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Read Hit:**"),"    \t      S","_","IDLE -> S","_","LU","_","CORE->S","_"," IDLE"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Read Miss:")," \t       S","_","IDLE -> S","_","LU","_","CORE->S","_","MB","_","WAIT","_","FILL -> S","_","MB","_","FILL","_","READY -> S","_"," IDLE")),(0,r.kt)("h2",{id:"52-pipe"},(0,r.kt)("a",{name:"_toc362446169"}),(0,r.kt)("a",{name:"_toc1128226896"}),(0,r.kt)("strong",{parentName:"h2"},"5.2 Pipe")),(0,r.kt)("p",null,"The \u201cPipe\u201d is a 3-stage pipeline that manages the tag array lookup (LU) & Cache access."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Stage 1: Tag Array Look up (Read)"),(0,r.kt)("li",{parentName:"ul"},"Stage 2: Tag Compare, Tag-Array Update, Cache Read"),(0,r.kt)("li",{parentName:"ul"},"Stage 3: Cache Write, FM Write Back ",(0,r.kt)("a",{parentName:"li",href:"#_evicting_cache-line"},"(Dirty evict)")," & FM Read - Fill ",(0,r.kt)("a",{parentName:"li",href:"#_core_read_miss."},"(Cache miss)"),", LU results to TQ.")),(0,r.kt)("h2",{id:"53-tag-array"},(0,r.kt)("a",{name:"_toc2002927206"}),(0,r.kt)("a",{name:"_toc768632131"}),(0,r.kt)("strong",{parentName:"h2"},"5.3 Tag Array")),(0,r.kt)("p",null,"The Tag Array is a memory structure that holds the Tags & Indication \u2013 Valid, Modified, MRU, Fill.\nThe \u201cSet\u201d (Index) is the Tag Array read pointer.\nA Lookup will return the entire \u201cSet",(0,r.kt)("a",{name:"_int_yon3np9n"}),"\u201d.\nEach \u201cset\u201d is 4-ways, meaning each Lookup will compare 4 TAG & their Indications with the Tag we are looking up.\nThe Tag Indication will update according to the Lookup request."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"MRU \u2013 A tag hit will update the Way MRU indication.\n",(0,r.kt)("inlineCode",{parentName:"li"}," "),"Micro architecture decision for the exact MRU arbitration scheme."),(0,r.kt)("li",{parentName:"ul"},"Modified \u2013 A Write request will update the Modified indication"),(0,r.kt)("li",{parentName:"ul"},"Fill \u2013 A Read miss will set the \u201cFill\u201d Indication. A Fill Hit with LU","_","FILL opcode will reset the \u201cFill\u201d Indication.")),(0,r.kt)("h2",{id:"54-data-cache-array"},(0,r.kt)("a",{name:"_toc1970387951"}),(0,r.kt)("a",{name:"_toc248060331"}),(0,r.kt)("strong",{parentName:"h2"},"5.4 Data Cache Array")),(0,r.kt)("p",null,"The Data Cache is a memory structure that holds the Cache-Line (CL) Data.\nEach access reads a \u201csingle\u201d CL - Meaning reading a single \u201cway",(0,r.kt)("a",{name:"_int_6lwusvnw"}),"\u201d.\nThe exact location in the Cache is determined by the \u2018Way hit\u2019 in the Tag Array Lookup.\nData Array pointer = {Set","[7:0]",",Way","[1:0]","}"))}h.isMDXComponent=!0}}]);